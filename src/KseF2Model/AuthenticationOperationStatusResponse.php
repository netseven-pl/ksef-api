<?php
/**
 * AuthenticationOperationStatusResponse
 *
 * PHP version 8.1
 *
 * @package  NetSeven
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * KSeF API TE
 *
 * **Wersja API:** 2.0.0 (build 2.0.0-rc2-te-20250725.2+5adfde843e2c34f7d63e9a50dccbb9dab79bc320)<br>  **Klucze publiczne** Ministerstwa Finansów (dla danego środowiska): [Pobierz klucze](#tag/Certyfikaty-klucza-publicznego)<br>  **Historia zmian:** [Changelog](#)<br>  **Rozszerzona dokumentacja API:** [ksef-docs](https://github.com/CIRFMF/ksef-docs/tree/main)
 *
 * The version of the OpenAPI document: v2
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NetSeven\KseF2Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use NetSeven\ObjectSerializer;

/**
 * AuthenticationOperationStatusResponse Class Doc Comment
 *
 * @package  NetSeven
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class AuthenticationOperationStatusResponse implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'AuthenticationOperationStatusResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'reference_number' => 'string',
        'is_current' => 'bool',
        'start_date' => '\DateTime',
        'authentication_method' => '\NetSeven\KseF2Model\AuthenticationMethod',
        'status' => '\NetSeven\KseF2Model\StatusInfo',
        'is_token_redeemed' => 'bool',
        'last_token_refresh_date' => '\DateTime',
        'refresh_token_valid_until' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'reference_number' => null,
        'is_current' => null,
        'start_date' => 'date-time',
        'authentication_method' => null,
        'status' => null,
        'is_token_redeemed' => null,
        'last_token_refresh_date' => 'date-time',
        'refresh_token_valid_until' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'reference_number' => false,
        'is_current' => false,
        'start_date' => false,
        'authentication_method' => false,
        'status' => false,
        'is_token_redeemed' => true,
        'last_token_refresh_date' => true,
        'refresh_token_valid_until' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'reference_number' => 'referenceNumber',
        'is_current' => 'isCurrent',
        'start_date' => 'startDate',
        'authentication_method' => 'authenticationMethod',
        'status' => 'status',
        'is_token_redeemed' => 'isTokenRedeemed',
        'last_token_refresh_date' => 'lastTokenRefreshDate',
        'refresh_token_valid_until' => 'refreshTokenValidUntil'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'reference_number' => 'setReferenceNumber',
        'is_current' => 'setIsCurrent',
        'start_date' => 'setStartDate',
        'authentication_method' => 'setAuthenticationMethod',
        'status' => 'setStatus',
        'is_token_redeemed' => 'setIsTokenRedeemed',
        'last_token_refresh_date' => 'setLastTokenRefreshDate',
        'refresh_token_valid_until' => 'setRefreshTokenValidUntil'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'reference_number' => 'getReferenceNumber',
        'is_current' => 'getIsCurrent',
        'start_date' => 'getStartDate',
        'authentication_method' => 'getAuthenticationMethod',
        'status' => 'getStatus',
        'is_token_redeemed' => 'getIsTokenRedeemed',
        'last_token_refresh_date' => 'getLastTokenRefreshDate',
        'refresh_token_valid_until' => 'getRefreshTokenValidUntil'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('reference_number', $data ?? [], null);
        $this->setIfExists('is_current', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
        $this->setIfExists('authentication_method', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('is_token_redeemed', $data ?? [], null);
        $this->setIfExists('last_token_refresh_date', $data ?? [], null);
        $this->setIfExists('refresh_token_valid_until', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['reference_number'] === null) {
            $invalidProperties[] = "'reference_number' can't be null";
        }
        if ($this->container['start_date'] === null) {
            $invalidProperties[] = "'start_date' can't be null";
        }
        if ($this->container['authentication_method'] === null) {
            $invalidProperties[] = "'authentication_method' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets reference_number
     *
     * @return string
     */
    public function getReferenceNumber(): string
    {
        return $this->container['reference_number'];
    }

    /**
     * Sets reference_number
     *
     * @param string $reference_number Numer referencyjny operacji uwierzytelnienia.
     *
     * @return $this
     */
    public function setReferenceNumber(string $reference_number): static
    {
        if (is_null($reference_number)) {
            throw new InvalidArgumentException('non-nullable reference_number cannot be null');
        }
        $this->container['reference_number'] = $reference_number;

        return $this;
    }

    /**
     * Gets is_current
     *
     * @return bool|null
     */
    public function getIsCurrent(): ?bool
    {
        return $this->container['is_current'];
    }

    /**
     * Sets is_current
     *
     * @param bool|null $is_current Czy sesja jest powiązana z aktualnie używanym tokenem.
     *
     * @return $this
     */
    public function setIsCurrent(?bool $is_current): static
    {
        if (is_null($is_current)) {
            throw new InvalidArgumentException('non-nullable is_current cannot be null');
        }
        $this->container['is_current'] = $is_current;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate(): \DateTime
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date Data rozpoczęcia operacji uwierzytelnienia.
     *
     * @return $this
     */
    public function setStartDate(\DateTime $start_date): static
    {
        if (is_null($start_date)) {
            throw new InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets authentication_method
     *
     * @return \NetSeven\KseF2Model\AuthenticationMethod
     */
    public function getAuthenticationMethod(): \NetSeven\KseF2Model\AuthenticationMethod
    {
        return $this->container['authentication_method'];
    }

    /**
     * Sets authentication_method
     *
     * @param \NetSeven\KseF2Model\AuthenticationMethod $authentication_method Użyta metoda uwierzytelnienia.  | Wartość | Opis |  | --- | --- |  | Token | Token KSeF. |  | TrustedProfile | Profil Zaufany. |  | InternalCertificate | Certyfikat KSeF. |  | QualifiedSignature | Podpis kwalifikowany. |  | QualifiedSeal | Pieczęć kwalifikowana. |  | PersonalSignature | Podpis osobisty. |
     *
     * @return $this
     */
    public function setAuthenticationMethod(\NetSeven\KseF2Model\AuthenticationMethod $authentication_method): static
    {
        if (is_null($authentication_method)) {
            throw new InvalidArgumentException('non-nullable authentication_method cannot be null');
        }
        $this->container['authentication_method'] = $authentication_method;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \NetSeven\KseF2Model\StatusInfo
     */
    public function getStatus(): \NetSeven\KseF2Model\StatusInfo
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \NetSeven\KseF2Model\StatusInfo $status Informacje o aktualnym statusie.  | Code | Description | Details |  | --- | --- | --- |  | 100 | Uwierzytelnianie w toku | - |  | 200 | Uwierzytelnianie zakończone sukcesem | - |  | 400 | Uwierzytelnianie zakończone niepowodzeniem | Nieważny certyfikat |  | 400 | Uwierzytelnianie zakończone niepowodzeniem | Błąd weryfikacji łańcucha certyfikatów |  | 400 | Uwierzytelnianie zakończone niepowodzeniem | Niezaufany łańcuch certyfikatów |  | 400 | Uwierzytelnianie zakończone niepowodzeniem | Certyfikat odwołany |  | 400 | Uwierzytelnianie zakończone niepowodzeniem | Niepoprawny certyfikat |  | 401 | Uwierzytelnienie unieważnione | Uwierzytelnienie i powiązane refresh tokeny zostały unieważnione przez użytkownika |  | 500 | Nieznany błąd | - |
     *
     * @return $this
     */
    public function setStatus(\NetSeven\KseF2Model\StatusInfo $status): static
    {
        if (is_null($status)) {
            throw new InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets is_token_redeemed
     *
     * @return bool|null
     */
    public function getIsTokenRedeemed(): ?bool
    {
        return $this->container['is_token_redeemed'];
    }

    /**
     * Sets is_token_redeemed
     *
     * @param bool|null $is_token_redeemed Czy został już wydany refresh token powiązany z danym uwierzytelnieniem.
     *
     * @return $this
     */
    public function setIsTokenRedeemed(?bool $is_token_redeemed): static
    {
        if (is_null($is_token_redeemed)) {
            array_push($this->openAPINullablesSetToNull, 'is_token_redeemed');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_token_redeemed', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_token_redeemed'] = $is_token_redeemed;

        return $this;
    }

    /**
     * Gets last_token_refresh_date
     *
     * @return \DateTime|null
     */
    public function getLastTokenRefreshDate(): ?\DateTime
    {
        return $this->container['last_token_refresh_date'];
    }

    /**
     * Sets last_token_refresh_date
     *
     * @param \DateTime|null $last_token_refresh_date Data ostatniego odświeżenia tokena.
     *
     * @return $this
     */
    public function setLastTokenRefreshDate(?\DateTime $last_token_refresh_date): static
    {
        if (is_null($last_token_refresh_date)) {
            array_push($this->openAPINullablesSetToNull, 'last_token_refresh_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_token_refresh_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_token_refresh_date'] = $last_token_refresh_date;

        return $this;
    }

    /**
     * Gets refresh_token_valid_until
     *
     * @return \DateTime|null
     */
    public function getRefreshTokenValidUntil(): ?\DateTime
    {
        return $this->container['refresh_token_valid_until'];
    }

    /**
     * Sets refresh_token_valid_until
     *
     * @param \DateTime|null $refresh_token_valid_until Termin ważności refresh tokena (o ile nie zostanie wcześniej unieważniony).
     *
     * @return $this
     */
    public function setRefreshTokenValidUntil(?\DateTime $refresh_token_valid_until): static
    {
        if (is_null($refresh_token_valid_until)) {
            array_push($this->openAPINullablesSetToNull, 'refresh_token_valid_until');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('refresh_token_valid_until', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['refresh_token_valid_until'] = $refresh_token_valid_until;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


