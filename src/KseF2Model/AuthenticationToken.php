<?php
/**
 * AuthenticationToken
 *
 * PHP version 8.1
 *
 * @package  NetSeven
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * KSeF API TE
 *
 * **Wersja API:** 2.0.0 (build 2.0.0-rc2-te-20250725.2+5adfde843e2c34f7d63e9a50dccbb9dab79bc320)<br>  **Klucze publiczne** Ministerstwa Finansów (dla danego środowiska): [Pobierz klucze](#tag/Certyfikaty-klucza-publicznego)<br>  **Historia zmian:** [Changelog](#)<br>  **Rozszerzona dokumentacja API:** [ksef-docs](https://github.com/CIRFMF/ksef-docs/tree/main)
 *
 * The version of the OpenAPI document: v2
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NetSeven\KseF2Model;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use NetSeven\ObjectSerializer;

/**
 * AuthenticationToken Class Doc Comment
 *
 * @package  NetSeven
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class AuthenticationToken implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'AuthenticationToken';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'reference_number' => 'string',
        'author_identifier' => '\NetSeven\KseF2Model\SubjectIdentifier',
        'context_identifier' => '\NetSeven\KseF2Model\ContextIdentifier',
        'description' => 'string',
        'requested_permissions' => '\NetSeven\KseF2Model\TokenPermissionType[]',
        'date_created' => '\DateTime',
        'status' => '\NetSeven\KseF2Model\AuthenticationTokenStatus'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'reference_number' => null,
        'author_identifier' => null,
        'context_identifier' => null,
        'description' => null,
        'requested_permissions' => null,
        'date_created' => 'date-time',
        'status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'reference_number' => true,
        'author_identifier' => true,
        'context_identifier' => true,
        'description' => true,
        'requested_permissions' => true,
        'date_created' => false,
        'status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'reference_number' => 'referenceNumber',
        'author_identifier' => 'authorIdentifier',
        'context_identifier' => 'contextIdentifier',
        'description' => 'description',
        'requested_permissions' => 'requestedPermissions',
        'date_created' => 'dateCreated',
        'status' => 'status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'reference_number' => 'setReferenceNumber',
        'author_identifier' => 'setAuthorIdentifier',
        'context_identifier' => 'setContextIdentifier',
        'description' => 'setDescription',
        'requested_permissions' => 'setRequestedPermissions',
        'date_created' => 'setDateCreated',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'reference_number' => 'getReferenceNumber',
        'author_identifier' => 'getAuthorIdentifier',
        'context_identifier' => 'getContextIdentifier',
        'description' => 'getDescription',
        'requested_permissions' => 'getRequestedPermissions',
        'date_created' => 'getDateCreated',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }


    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public static function getRequestedPermissionsAllowableValues()
    {
        return [
            
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('reference_number', $data ?? [], null);
        $this->setIfExists('author_identifier', $data ?? [], null);
        $this->setIfExists('context_identifier', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('requested_permissions', $data ?? [], null);
        $this->setIfExists('date_created', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets reference_number
     *
     * @return string|null
     */
    public function getReferenceNumber(): ?string
    {
        return $this->container['reference_number'];
    }

    /**
     * Sets reference_number
     *
     * @param string|null $reference_number Numer referencyjny tokena.
     *
     * @return $this
     */
    public function setReferenceNumber(?string $reference_number): static
    {
        if (is_null($reference_number)) {
            array_push($this->openAPINullablesSetToNull, 'reference_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('reference_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['reference_number'] = $reference_number;

        return $this;
    }

    /**
     * Gets author_identifier
     *
     * @return \NetSeven\KseF2Model\SubjectIdentifier|null
     */
    public function getAuthorIdentifier(): ?\NetSeven\KseF2Model\SubjectIdentifier
    {
        return $this->container['author_identifier'];
    }

    /**
     * Sets author_identifier
     *
     * @param \NetSeven\KseF2Model\SubjectIdentifier|null $author_identifier Identyfikator osoby która wygenerowała token.
     *
     * @return $this
     */
    public function setAuthorIdentifier(?\NetSeven\KseF2Model\SubjectIdentifier $author_identifier): static
    {
        if (is_null($author_identifier)) {
            array_push($this->openAPINullablesSetToNull, 'author_identifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('author_identifier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['author_identifier'] = $author_identifier;

        return $this;
    }

    /**
     * Gets context_identifier
     *
     * @return \NetSeven\KseF2Model\ContextIdentifier|null
     */
    public function getContextIdentifier(): ?\NetSeven\KseF2Model\ContextIdentifier
    {
        return $this->container['context_identifier'];
    }

    /**
     * Sets context_identifier
     *
     * @param \NetSeven\KseF2Model\ContextIdentifier|null $context_identifier Identyfikator kontekstu, w którym został wygenerowany token i do którego daje dostęp.
     *
     * @return $this
     */
    public function setContextIdentifier(?\NetSeven\KseF2Model\ContextIdentifier $context_identifier): static
    {
        if (is_null($context_identifier)) {
            array_push($this->openAPINullablesSetToNull, 'context_identifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('context_identifier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['context_identifier'] = $context_identifier;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Opis tokena.
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets requested_permissions
     *
     * @return \NetSeven\KseF2Model\TokenPermissionType[]|null
     */
    public function getRequestedPermissions(): ?array
    {
        return $this->container['requested_permissions'];
    }

    /**
     * Sets requested_permissions
     *
     * @param \NetSeven\KseF2Model\TokenPermissionType[]|null $requested_permissions Uprawnienia przypisane tokenowi.
     *
     * @return $this
     */
    public function setRequestedPermissions(?array $requested_permissions): static
    {
        if (is_null($requested_permissions)) {
            array_push($this->openAPINullablesSetToNull, 'requested_permissions');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('requested_permissions', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $allowedValues = self::getRequestedPermissionsAllowableValues();
        if (!is_null($requested_permissions) && array_diff($requested_permissions, $allowedValues)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value for 'requested_permissions', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['requested_permissions'] = $requested_permissions;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated(): ?\DateTime
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created Data i czas utworzenia tokena.
     *
     * @return $this
     */
    public function setDateCreated(?\DateTime $date_created): static
    {
        if (is_null($date_created)) {
            throw new InvalidArgumentException('non-nullable date_created cannot be null');
        }
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \NetSeven\KseF2Model\AuthenticationTokenStatus|null
     */
    public function getStatus(): ?\NetSeven\KseF2Model\AuthenticationTokenStatus
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \NetSeven\KseF2Model\AuthenticationTokenStatus|null $status Status tokena.  | Wartość | Opis |  | --- | --- |  | Pending | Token został utworzony ale jest jeszcze w trakcie aktywacji i nadawania uprawnień. Nie może być jeszcze wykorzystywany do uwierzytelniania. |  | Active | Token jest aktywny i może być wykorzystywany do uwierzytelniania. |  | Revoking | Token jest w trakcie unieważniania. Nie może już być wykorzystywany do uwierzytelniania. |  | Revoked | Token został unieważniony i nie może być wykorzystywany do uwierzytelniania. |  | Failed | Nie udało się aktywować tokena. Należy wygenerować nowy token, obecny nie może być wykorzystywany do uwierzytelniania. |
     *
     * @return $this
     */
    public function setStatus(?\NetSeven\KseF2Model\AuthenticationTokenStatus $status): static
    {
        if (is_null($status)) {
            throw new InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


