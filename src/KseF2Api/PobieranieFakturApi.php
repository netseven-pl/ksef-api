<?php
/**
 * PobieranieFakturApi
 * PHP version 8.1
 *
 * @package  NetSeven
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * KSeF API TE
 *
 * **Wersja API:** 2.0.0 (build 2.0.0-rc2-te-20250725.2+5adfde843e2c34f7d63e9a50dccbb9dab79bc320)<br>  **Klucze publiczne** Ministerstwa Finansów (dla danego środowiska): [Pobierz klucze](#tag/Certyfikaty-klucza-publicznego)<br>  **Historia zmian:** [Changelog](#)<br>  **Rozszerzona dokumentacja API:** [ksef-docs](https://github.com/CIRFMF/ksef-docs/tree/main)
 *
 * The version of the OpenAPI document: v2
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NetSeven\KseF2Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use NetSeven\ApiException;
use NetSeven\Configuration;
use NetSeven\HeaderSelector;
use NetSeven\FormDataProcessor;
use NetSeven\ObjectSerializer;

/**
 * PobieranieFakturApi Class Doc Comment
 *
 * @package  NetSeven
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PobieranieFakturApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiV2InvoicesAsyncQueryOperationReferenceNumberGet' => [
            'application/json',
        ],
        'apiV2InvoicesAsyncQueryPost' => [
            'application/json',
        ],
        'apiV2InvoicesDownloadPost' => [
            'application/json',
        ],
        'apiV2InvoicesKsefKsefNumberGet' => [
            'application/json',
        ],
        'apiV2InvoicesQueryPost' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation apiV2InvoicesAsyncQueryOperationReferenceNumberGet
     *
     * [mock] Sprawdza status asynchronicznego zapytania o pobranie faktur
     *
     * @param  string $operation_reference_number Unikalny identyfikator operacji zwrócony podczas inicjalizacji zapytania. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2InvoicesAsyncQueryOperationReferenceNumberGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \NetSeven\KseF2Model\AsyncInvoicesQueryStatus|\NetSeven\KseF2Model\ExceptionResponse
     */
    public function apiV2InvoicesAsyncQueryOperationReferenceNumberGet(
        string $operation_reference_number,
        string $contentType = self::contentTypes['apiV2InvoicesAsyncQueryOperationReferenceNumberGet'][0]
    ): \NetSeven\KseF2Model\AsyncInvoicesQueryStatus|\NetSeven\KseF2Model\ExceptionResponse
    {
        list($response) = $this->apiV2InvoicesAsyncQueryOperationReferenceNumberGetWithHttpInfo($operation_reference_number, $contentType);
        return $response;
    }

    /**
     * Operation apiV2InvoicesAsyncQueryOperationReferenceNumberGetWithHttpInfo
     *
     * [mock] Sprawdza status asynchronicznego zapytania o pobranie faktur
     *
     * @param  string $operation_reference_number Unikalny identyfikator operacji zwrócony podczas inicjalizacji zapytania. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2InvoicesAsyncQueryOperationReferenceNumberGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \NetSeven\KseF2Model\AsyncInvoicesQueryStatus|\NetSeven\KseF2Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2InvoicesAsyncQueryOperationReferenceNumberGetWithHttpInfo(
        string $operation_reference_number,
        string $contentType = self::contentTypes['apiV2InvoicesAsyncQueryOperationReferenceNumberGet'][0]
    ): array
    {
        $request = $this->apiV2InvoicesAsyncQueryOperationReferenceNumberGetRequest($operation_reference_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\NetSeven\KseF2Model\AsyncInvoicesQueryStatus',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\NetSeven\KseF2Model\ExceptionResponse',
                        $request,
                        $response,
                    );
            }
            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\NetSeven\KseF2Model\AsyncInvoicesQueryStatus',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NetSeven\KseF2Model\AsyncInvoicesQueryStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NetSeven\KseF2Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation apiV2InvoicesAsyncQueryOperationReferenceNumberGetAsync
     *
     * [mock] Sprawdza status asynchronicznego zapytania o pobranie faktur
     *
     * @param  string $operation_reference_number Unikalny identyfikator operacji zwrócony podczas inicjalizacji zapytania. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2InvoicesAsyncQueryOperationReferenceNumberGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiV2InvoicesAsyncQueryOperationReferenceNumberGetAsync(
        string $operation_reference_number,
        string $contentType = self::contentTypes['apiV2InvoicesAsyncQueryOperationReferenceNumberGet'][0]
    ): PromiseInterface
    {
        return $this->apiV2InvoicesAsyncQueryOperationReferenceNumberGetAsyncWithHttpInfo($operation_reference_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2InvoicesAsyncQueryOperationReferenceNumberGetAsyncWithHttpInfo
     *
     * [mock] Sprawdza status asynchronicznego zapytania o pobranie faktur
     *
     * @param  string $operation_reference_number Unikalny identyfikator operacji zwrócony podczas inicjalizacji zapytania. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2InvoicesAsyncQueryOperationReferenceNumberGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiV2InvoicesAsyncQueryOperationReferenceNumberGetAsyncWithHttpInfo(
        string $operation_reference_number,
        string $contentType = self::contentTypes['apiV2InvoicesAsyncQueryOperationReferenceNumberGet'][0]
    ): PromiseInterface
    {
        $returnType = '\NetSeven\KseF2Model\AsyncInvoicesQueryStatus';
        $request = $this->apiV2InvoicesAsyncQueryOperationReferenceNumberGetRequest($operation_reference_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2InvoicesAsyncQueryOperationReferenceNumberGet'
     *
     * @param  string $operation_reference_number Unikalny identyfikator operacji zwrócony podczas inicjalizacji zapytania. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2InvoicesAsyncQueryOperationReferenceNumberGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2InvoicesAsyncQueryOperationReferenceNumberGetRequest(
        string $operation_reference_number,
        string $contentType = self::contentTypes['apiV2InvoicesAsyncQueryOperationReferenceNumberGet'][0]
    ): Request
    {

        // verify the required parameter 'operation_reference_number' is set
        if ($operation_reference_number === null || (is_array($operation_reference_number) && count($operation_reference_number) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $operation_reference_number when calling apiV2InvoicesAsyncQueryOperationReferenceNumberGet'
            );
        }


        $resourcePath = '/api/v2/invoices/async-query/{operationReferenceNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($operation_reference_number !== null) {
            $resourcePath = str_replace(
                '{' . 'operationReferenceNumber' . '}',
                ObjectSerializer::toPathValue($operation_reference_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2InvoicesAsyncQueryPost
     *
     * [mock] Inicjalizuje asynchroniczne zapytanie o pobranie faktur
     *
     * @param  \NetSeven\KseF2Model\InvoicesAsyncQueryRequest|null $invoices_async_query_request Zestaw filtrów dla wyszukiwania faktur. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2InvoicesAsyncQueryPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \NetSeven\KseF2Model\InitAsyncInvoicesQueryResponse|\NetSeven\KseF2Model\ExceptionResponse
     */
    public function apiV2InvoicesAsyncQueryPost(
        ?\NetSeven\KseF2Model\InvoicesAsyncQueryRequest $invoices_async_query_request = null,
        string $contentType = self::contentTypes['apiV2InvoicesAsyncQueryPost'][0]
    ): \NetSeven\KseF2Model\InitAsyncInvoicesQueryResponse|\NetSeven\KseF2Model\ExceptionResponse
    {
        list($response) = $this->apiV2InvoicesAsyncQueryPostWithHttpInfo($invoices_async_query_request, $contentType);
        return $response;
    }

    /**
     * Operation apiV2InvoicesAsyncQueryPostWithHttpInfo
     *
     * [mock] Inicjalizuje asynchroniczne zapytanie o pobranie faktur
     *
     * @param  \NetSeven\KseF2Model\InvoicesAsyncQueryRequest|null $invoices_async_query_request Zestaw filtrów dla wyszukiwania faktur. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2InvoicesAsyncQueryPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \NetSeven\KseF2Model\InitAsyncInvoicesQueryResponse|\NetSeven\KseF2Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2InvoicesAsyncQueryPostWithHttpInfo(
        ?\NetSeven\KseF2Model\InvoicesAsyncQueryRequest $invoices_async_query_request = null,
        string $contentType = self::contentTypes['apiV2InvoicesAsyncQueryPost'][0]
    ): array
    {
        $request = $this->apiV2InvoicesAsyncQueryPostRequest($invoices_async_query_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\NetSeven\KseF2Model\InitAsyncInvoicesQueryResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\NetSeven\KseF2Model\ExceptionResponse',
                        $request,
                        $response,
                    );
            }
            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\NetSeven\KseF2Model\InitAsyncInvoicesQueryResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NetSeven\KseF2Model\InitAsyncInvoicesQueryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NetSeven\KseF2Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation apiV2InvoicesAsyncQueryPostAsync
     *
     * [mock] Inicjalizuje asynchroniczne zapytanie o pobranie faktur
     *
     * @param  \NetSeven\KseF2Model\InvoicesAsyncQueryRequest|null $invoices_async_query_request Zestaw filtrów dla wyszukiwania faktur. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2InvoicesAsyncQueryPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiV2InvoicesAsyncQueryPostAsync(
        ?\NetSeven\KseF2Model\InvoicesAsyncQueryRequest $invoices_async_query_request = null,
        string $contentType = self::contentTypes['apiV2InvoicesAsyncQueryPost'][0]
    ): PromiseInterface
    {
        return $this->apiV2InvoicesAsyncQueryPostAsyncWithHttpInfo($invoices_async_query_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2InvoicesAsyncQueryPostAsyncWithHttpInfo
     *
     * [mock] Inicjalizuje asynchroniczne zapytanie o pobranie faktur
     *
     * @param  \NetSeven\KseF2Model\InvoicesAsyncQueryRequest|null $invoices_async_query_request Zestaw filtrów dla wyszukiwania faktur. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2InvoicesAsyncQueryPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiV2InvoicesAsyncQueryPostAsyncWithHttpInfo(
        ?\NetSeven\KseF2Model\InvoicesAsyncQueryRequest $invoices_async_query_request = null,
        string $contentType = self::contentTypes['apiV2InvoicesAsyncQueryPost'][0]
    ): PromiseInterface
    {
        $returnType = '\NetSeven\KseF2Model\InitAsyncInvoicesQueryResponse';
        $request = $this->apiV2InvoicesAsyncQueryPostRequest($invoices_async_query_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2InvoicesAsyncQueryPost'
     *
     * @param  \NetSeven\KseF2Model\InvoicesAsyncQueryRequest|null $invoices_async_query_request Zestaw filtrów dla wyszukiwania faktur. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2InvoicesAsyncQueryPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2InvoicesAsyncQueryPostRequest(
        ?\NetSeven\KseF2Model\InvoicesAsyncQueryRequest $invoices_async_query_request = null,
        string $contentType = self::contentTypes['apiV2InvoicesAsyncQueryPost'][0]
    ): Request
    {



        $resourcePath = '/api/v2/invoices/async-query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($invoices_async_query_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($invoices_async_query_request));
            } else {
                $httpBody = $invoices_async_query_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2InvoicesDownloadPost
     *
     * [mock]Pobranie faktury  na podstawie numeru KSeF oraz danych faktury
     *
     * @param  \NetSeven\KseF2Model\DownloadInvoiceRequest|null $download_invoice_request download_invoice_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2InvoicesDownloadPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return string|\NetSeven\KseF2Model\ExceptionResponse
     */
    public function apiV2InvoicesDownloadPost(
        ?\NetSeven\KseF2Model\DownloadInvoiceRequest $download_invoice_request = null,
        string $contentType = self::contentTypes['apiV2InvoicesDownloadPost'][0]
    ): string|\NetSeven\KseF2Model\ExceptionResponse
    {
        list($response) = $this->apiV2InvoicesDownloadPostWithHttpInfo($download_invoice_request, $contentType);
        return $response;
    }

    /**
     * Operation apiV2InvoicesDownloadPostWithHttpInfo
     *
     * [mock]Pobranie faktury  na podstawie numeru KSeF oraz danych faktury
     *
     * @param  \NetSeven\KseF2Model\DownloadInvoiceRequest|null $download_invoice_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2InvoicesDownloadPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of string|\NetSeven\KseF2Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2InvoicesDownloadPostWithHttpInfo(
        ?\NetSeven\KseF2Model\DownloadInvoiceRequest $download_invoice_request = null,
        string $contentType = self::contentTypes['apiV2InvoicesDownloadPost'][0]
    ): array
    {
        $request = $this->apiV2InvoicesDownloadPostRequest($download_invoice_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'string',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\NetSeven\KseF2Model\ExceptionResponse',
                        $request,
                        $response,
                    );
            }
            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'string',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NetSeven\KseF2Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation apiV2InvoicesDownloadPostAsync
     *
     * [mock]Pobranie faktury  na podstawie numeru KSeF oraz danych faktury
     *
     * @param  \NetSeven\KseF2Model\DownloadInvoiceRequest|null $download_invoice_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2InvoicesDownloadPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiV2InvoicesDownloadPostAsync(
        ?\NetSeven\KseF2Model\DownloadInvoiceRequest $download_invoice_request = null,
        string $contentType = self::contentTypes['apiV2InvoicesDownloadPost'][0]
    ): PromiseInterface
    {
        return $this->apiV2InvoicesDownloadPostAsyncWithHttpInfo($download_invoice_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2InvoicesDownloadPostAsyncWithHttpInfo
     *
     * [mock]Pobranie faktury  na podstawie numeru KSeF oraz danych faktury
     *
     * @param  \NetSeven\KseF2Model\DownloadInvoiceRequest|null $download_invoice_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2InvoicesDownloadPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiV2InvoicesDownloadPostAsyncWithHttpInfo(
        ?\NetSeven\KseF2Model\DownloadInvoiceRequest $download_invoice_request = null,
        string $contentType = self::contentTypes['apiV2InvoicesDownloadPost'][0]
    ): PromiseInterface
    {
        $returnType = 'string';
        $request = $this->apiV2InvoicesDownloadPostRequest($download_invoice_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2InvoicesDownloadPost'
     *
     * @param  \NetSeven\KseF2Model\DownloadInvoiceRequest|null $download_invoice_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2InvoicesDownloadPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2InvoicesDownloadPostRequest(
        ?\NetSeven\KseF2Model\DownloadInvoiceRequest $download_invoice_request = null,
        string $contentType = self::contentTypes['apiV2InvoicesDownloadPost'][0]
    ): Request
    {



        $resourcePath = '/api/v2/invoices/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/xml', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($download_invoice_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($download_invoice_request));
            } else {
                $httpBody = $download_invoice_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2InvoicesKsefKsefNumberGet
     *
     * Pobranie faktury po numerze KSeF
     *
     * @param  string $ksef_number Numer KSeF faktury. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2InvoicesKsefKsefNumberGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return string|\NetSeven\KseF2Model\ExceptionResponse
     */
    public function apiV2InvoicesKsefKsefNumberGet(
        string $ksef_number,
        string $contentType = self::contentTypes['apiV2InvoicesKsefKsefNumberGet'][0]
    ): string|\NetSeven\KseF2Model\ExceptionResponse
    {
        list($response) = $this->apiV2InvoicesKsefKsefNumberGetWithHttpInfo($ksef_number, $contentType);
        return $response;
    }

    /**
     * Operation apiV2InvoicesKsefKsefNumberGetWithHttpInfo
     *
     * Pobranie faktury po numerze KSeF
     *
     * @param  string $ksef_number Numer KSeF faktury. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2InvoicesKsefKsefNumberGet'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of string|\NetSeven\KseF2Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2InvoicesKsefKsefNumberGetWithHttpInfo(
        string $ksef_number,
        string $contentType = self::contentTypes['apiV2InvoicesKsefKsefNumberGet'][0]
    ): array
    {
        $request = $this->apiV2InvoicesKsefKsefNumberGetRequest($ksef_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'string',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\NetSeven\KseF2Model\ExceptionResponse',
                        $request,
                        $response,
                    );
            }
            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'string',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NetSeven\KseF2Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation apiV2InvoicesKsefKsefNumberGetAsync
     *
     * Pobranie faktury po numerze KSeF
     *
     * @param  string $ksef_number Numer KSeF faktury. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2InvoicesKsefKsefNumberGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiV2InvoicesKsefKsefNumberGetAsync(
        string $ksef_number,
        string $contentType = self::contentTypes['apiV2InvoicesKsefKsefNumberGet'][0]
    ): PromiseInterface
    {
        return $this->apiV2InvoicesKsefKsefNumberGetAsyncWithHttpInfo($ksef_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2InvoicesKsefKsefNumberGetAsyncWithHttpInfo
     *
     * Pobranie faktury po numerze KSeF
     *
     * @param  string $ksef_number Numer KSeF faktury. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2InvoicesKsefKsefNumberGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiV2InvoicesKsefKsefNumberGetAsyncWithHttpInfo(
        string $ksef_number,
        string $contentType = self::contentTypes['apiV2InvoicesKsefKsefNumberGet'][0]
    ): PromiseInterface
    {
        $returnType = 'string';
        $request = $this->apiV2InvoicesKsefKsefNumberGetRequest($ksef_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2InvoicesKsefKsefNumberGet'
     *
     * @param  string $ksef_number Numer KSeF faktury. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2InvoicesKsefKsefNumberGet'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2InvoicesKsefKsefNumberGetRequest(
        string $ksef_number,
        string $contentType = self::contentTypes['apiV2InvoicesKsefKsefNumberGet'][0]
    ): Request
    {

        // verify the required parameter 'ksef_number' is set
        if ($ksef_number === null || (is_array($ksef_number) && count($ksef_number) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $ksef_number when calling apiV2InvoicesKsefKsefNumberGet'
            );
        }


        $resourcePath = '/api/v2/invoices/ksef/{ksefNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($ksef_number !== null) {
            $resourcePath = str_replace(
                '{' . 'ksefNumber' . '}',
                ObjectSerializer::toPathValue($ksef_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/xml', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2InvoicesQueryPost
     *
     * [mock] Pobranie listy metadanych faktur
     *
     * @param  int|null $page_offset Indeks pierwszej strony wyników (domyślnie 0). (optional)
     * @param  int|null $page_size Rozmiar strony wyników(domyślnie 10). (optional)
     * @param  \NetSeven\KseF2Model\InvoicesQueryRequest|null $invoices_query_request Zestaw filtrów dla wyszukiwania metadanych. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2InvoicesQueryPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \NetSeven\KseF2Model\QueryInvoicesReponse|\NetSeven\KseF2Model\ExceptionResponse
     */
    public function apiV2InvoicesQueryPost(
        ?int $page_offset = null,
        ?int $page_size = null,
        ?\NetSeven\KseF2Model\InvoicesQueryRequest $invoices_query_request = null,
        string $contentType = self::contentTypes['apiV2InvoicesQueryPost'][0]
    ): \NetSeven\KseF2Model\QueryInvoicesReponse|\NetSeven\KseF2Model\ExceptionResponse
    {
        list($response) = $this->apiV2InvoicesQueryPostWithHttpInfo($page_offset, $page_size, $invoices_query_request, $contentType);
        return $response;
    }

    /**
     * Operation apiV2InvoicesQueryPostWithHttpInfo
     *
     * [mock] Pobranie listy metadanych faktur
     *
     * @param  int|null $page_offset Indeks pierwszej strony wyników (domyślnie 0). (optional)
     * @param  int|null $page_size Rozmiar strony wyników(domyślnie 10). (optional)
     * @param  \NetSeven\KseF2Model\InvoicesQueryRequest|null $invoices_query_request Zestaw filtrów dla wyszukiwania metadanych. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2InvoicesQueryPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \NetSeven\KseF2Model\QueryInvoicesReponse|\NetSeven\KseF2Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2InvoicesQueryPostWithHttpInfo(
        ?int $page_offset = null,
        ?int $page_size = null,
        ?\NetSeven\KseF2Model\InvoicesQueryRequest $invoices_query_request = null,
        string $contentType = self::contentTypes['apiV2InvoicesQueryPost'][0]
    ): array
    {
        $request = $this->apiV2InvoicesQueryPostRequest($page_offset, $page_size, $invoices_query_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\NetSeven\KseF2Model\QueryInvoicesReponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\NetSeven\KseF2Model\ExceptionResponse',
                        $request,
                        $response,
                    );
            }
            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\NetSeven\KseF2Model\QueryInvoicesReponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NetSeven\KseF2Model\QueryInvoicesReponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NetSeven\KseF2Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation apiV2InvoicesQueryPostAsync
     *
     * [mock] Pobranie listy metadanych faktur
     *
     * @param  int|null $page_offset Indeks pierwszej strony wyników (domyślnie 0). (optional)
     * @param  int|null $page_size Rozmiar strony wyników(domyślnie 10). (optional)
     * @param  \NetSeven\KseF2Model\InvoicesQueryRequest|null $invoices_query_request Zestaw filtrów dla wyszukiwania metadanych. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2InvoicesQueryPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiV2InvoicesQueryPostAsync(
        ?int $page_offset = null,
        ?int $page_size = null,
        ?\NetSeven\KseF2Model\InvoicesQueryRequest $invoices_query_request = null,
        string $contentType = self::contentTypes['apiV2InvoicesQueryPost'][0]
    ): PromiseInterface
    {
        return $this->apiV2InvoicesQueryPostAsyncWithHttpInfo($page_offset, $page_size, $invoices_query_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2InvoicesQueryPostAsyncWithHttpInfo
     *
     * [mock] Pobranie listy metadanych faktur
     *
     * @param  int|null $page_offset Indeks pierwszej strony wyników (domyślnie 0). (optional)
     * @param  int|null $page_size Rozmiar strony wyników(domyślnie 10). (optional)
     * @param  \NetSeven\KseF2Model\InvoicesQueryRequest|null $invoices_query_request Zestaw filtrów dla wyszukiwania metadanych. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2InvoicesQueryPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiV2InvoicesQueryPostAsyncWithHttpInfo(
        ?int $page_offset = null,
        ?int $page_size = null,
        ?\NetSeven\KseF2Model\InvoicesQueryRequest $invoices_query_request = null,
        string $contentType = self::contentTypes['apiV2InvoicesQueryPost'][0]
    ): PromiseInterface
    {
        $returnType = '\NetSeven\KseF2Model\QueryInvoicesReponse';
        $request = $this->apiV2InvoicesQueryPostRequest($page_offset, $page_size, $invoices_query_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2InvoicesQueryPost'
     *
     * @param  int|null $page_offset Indeks pierwszej strony wyników (domyślnie 0). (optional)
     * @param  int|null $page_size Rozmiar strony wyników(domyślnie 10). (optional)
     * @param  \NetSeven\KseF2Model\InvoicesQueryRequest|null $invoices_query_request Zestaw filtrów dla wyszukiwania metadanych. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2InvoicesQueryPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2InvoicesQueryPostRequest(
        ?int $page_offset = null,
        ?int $page_size = null,
        ?\NetSeven\KseF2Model\InvoicesQueryRequest $invoices_query_request = null,
        string $contentType = self::contentTypes['apiV2InvoicesQueryPost'][0]
    ): Request
    {





        $resourcePath = '/api/v2/invoices/query';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_offset,
            'pageOffset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($invoices_query_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($invoices_query_request));
            } else {
                $httpBody = $invoices_query_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response,
    ): array {
        if (in_array($dataType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode,
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
