<?php
/**
 * DaneTestoweApi
 * PHP version 8.1
 *
 * @package  NetSeven
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * KSeF API TE
 *
 * **Wersja API:** 2.0.0 (build 2.0.0-rc2-te-20250725.2+5adfde843e2c34f7d63e9a50dccbb9dab79bc320)<br>  **Klucze publiczne** Ministerstwa Finansów (dla danego środowiska): [Pobierz klucze](#tag/Certyfikaty-klucza-publicznego)<br>  **Historia zmian:** [Changelog](#)<br>  **Rozszerzona dokumentacja API:** [ksef-docs](https://github.com/CIRFMF/ksef-docs/tree/main)
 *
 * The version of the OpenAPI document: v2
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace NetSeven\KseF2Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use NetSeven\ApiException;
use NetSeven\Configuration;
use NetSeven\HeaderSelector;
use NetSeven\FormDataProcessor;
use NetSeven\ObjectSerializer;

/**
 * DaneTestoweApi Class Doc Comment
 *
 * @package  NetSeven
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DaneTestoweApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiV2TestdataPermissionsPost' => [
            'application/json',
        ],
        'apiV2TestdataPermissionsRevokePost' => [
            'application/json',
        ],
        'apiV2TestdataPersonPost' => [
            'application/json',
        ],
        'apiV2TestdataPersonRemovePost' => [
            'application/json',
        ],
        'apiV2TestdataSubjectPost' => [
            'application/json',
        ],
        'apiV2TestdataSubjectRemovePost' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation apiV2TestdataPermissionsPost
     *
     * Nadanie uprawnień testowemu podmiotowi/osobie fizycznej
     *
     * @param  \NetSeven\KseF2Model\TestDataPermissionsGrantRequest|null $test_data_permissions_grant_request test_data_permissions_grant_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TestdataPermissionsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \NetSeven\KseF2Model\ExceptionResponse
     */
    public function apiV2TestdataPermissionsPost(
        ?\NetSeven\KseF2Model\TestDataPermissionsGrantRequest $test_data_permissions_grant_request = null,
        string $contentType = self::contentTypes['apiV2TestdataPermissionsPost'][0]
    ): \NetSeven\KseF2Model\ExceptionResponse
    {
        list($response) = $this->apiV2TestdataPermissionsPostWithHttpInfo($test_data_permissions_grant_request, $contentType);
        return $response;
    }

    /**
     * Operation apiV2TestdataPermissionsPostWithHttpInfo
     *
     * Nadanie uprawnień testowemu podmiotowi/osobie fizycznej
     *
     * @param  \NetSeven\KseF2Model\TestDataPermissionsGrantRequest|null $test_data_permissions_grant_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TestdataPermissionsPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2TestdataPermissionsPostWithHttpInfo(
        ?\NetSeven\KseF2Model\TestDataPermissionsGrantRequest $test_data_permissions_grant_request = null,
        string $contentType = self::contentTypes['apiV2TestdataPermissionsPost'][0]
    ): array
    {
        $request = $this->apiV2TestdataPermissionsPostRequest($test_data_permissions_grant_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NetSeven\KseF2Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation apiV2TestdataPermissionsPostAsync
     *
     * Nadanie uprawnień testowemu podmiotowi/osobie fizycznej
     *
     * @param  \NetSeven\KseF2Model\TestDataPermissionsGrantRequest|null $test_data_permissions_grant_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TestdataPermissionsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiV2TestdataPermissionsPostAsync(
        ?\NetSeven\KseF2Model\TestDataPermissionsGrantRequest $test_data_permissions_grant_request = null,
        string $contentType = self::contentTypes['apiV2TestdataPermissionsPost'][0]
    ): PromiseInterface
    {
        return $this->apiV2TestdataPermissionsPostAsyncWithHttpInfo($test_data_permissions_grant_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2TestdataPermissionsPostAsyncWithHttpInfo
     *
     * Nadanie uprawnień testowemu podmiotowi/osobie fizycznej
     *
     * @param  \NetSeven\KseF2Model\TestDataPermissionsGrantRequest|null $test_data_permissions_grant_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TestdataPermissionsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiV2TestdataPermissionsPostAsyncWithHttpInfo(
        ?\NetSeven\KseF2Model\TestDataPermissionsGrantRequest $test_data_permissions_grant_request = null,
        string $contentType = self::contentTypes['apiV2TestdataPermissionsPost'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->apiV2TestdataPermissionsPostRequest($test_data_permissions_grant_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2TestdataPermissionsPost'
     *
     * @param  \NetSeven\KseF2Model\TestDataPermissionsGrantRequest|null $test_data_permissions_grant_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TestdataPermissionsPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2TestdataPermissionsPostRequest(
        ?\NetSeven\KseF2Model\TestDataPermissionsGrantRequest $test_data_permissions_grant_request = null,
        string $contentType = self::contentTypes['apiV2TestdataPermissionsPost'][0]
    ): Request
    {



        $resourcePath = '/api/v2/testdata/permissions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($test_data_permissions_grant_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($test_data_permissions_grant_request));
            } else {
                $httpBody = $test_data_permissions_grant_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2TestdataPermissionsRevokePost
     *
     * Odebranie uprawnień testowemu podmiotowi/osobie fizycznej
     *
     * @param  \NetSeven\KseF2Model\TestDataPermissionsRevokeRequest|null $test_data_permissions_revoke_request test_data_permissions_revoke_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TestdataPermissionsRevokePost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \NetSeven\KseF2Model\ExceptionResponse
     */
    public function apiV2TestdataPermissionsRevokePost(
        ?\NetSeven\KseF2Model\TestDataPermissionsRevokeRequest $test_data_permissions_revoke_request = null,
        string $contentType = self::contentTypes['apiV2TestdataPermissionsRevokePost'][0]
    ): \NetSeven\KseF2Model\ExceptionResponse
    {
        list($response) = $this->apiV2TestdataPermissionsRevokePostWithHttpInfo($test_data_permissions_revoke_request, $contentType);
        return $response;
    }

    /**
     * Operation apiV2TestdataPermissionsRevokePostWithHttpInfo
     *
     * Odebranie uprawnień testowemu podmiotowi/osobie fizycznej
     *
     * @param  \NetSeven\KseF2Model\TestDataPermissionsRevokeRequest|null $test_data_permissions_revoke_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TestdataPermissionsRevokePost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2TestdataPermissionsRevokePostWithHttpInfo(
        ?\NetSeven\KseF2Model\TestDataPermissionsRevokeRequest $test_data_permissions_revoke_request = null,
        string $contentType = self::contentTypes['apiV2TestdataPermissionsRevokePost'][0]
    ): array
    {
        $request = $this->apiV2TestdataPermissionsRevokePostRequest($test_data_permissions_revoke_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NetSeven\KseF2Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation apiV2TestdataPermissionsRevokePostAsync
     *
     * Odebranie uprawnień testowemu podmiotowi/osobie fizycznej
     *
     * @param  \NetSeven\KseF2Model\TestDataPermissionsRevokeRequest|null $test_data_permissions_revoke_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TestdataPermissionsRevokePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiV2TestdataPermissionsRevokePostAsync(
        ?\NetSeven\KseF2Model\TestDataPermissionsRevokeRequest $test_data_permissions_revoke_request = null,
        string $contentType = self::contentTypes['apiV2TestdataPermissionsRevokePost'][0]
    ): PromiseInterface
    {
        return $this->apiV2TestdataPermissionsRevokePostAsyncWithHttpInfo($test_data_permissions_revoke_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2TestdataPermissionsRevokePostAsyncWithHttpInfo
     *
     * Odebranie uprawnień testowemu podmiotowi/osobie fizycznej
     *
     * @param  \NetSeven\KseF2Model\TestDataPermissionsRevokeRequest|null $test_data_permissions_revoke_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TestdataPermissionsRevokePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiV2TestdataPermissionsRevokePostAsyncWithHttpInfo(
        ?\NetSeven\KseF2Model\TestDataPermissionsRevokeRequest $test_data_permissions_revoke_request = null,
        string $contentType = self::contentTypes['apiV2TestdataPermissionsRevokePost'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->apiV2TestdataPermissionsRevokePostRequest($test_data_permissions_revoke_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2TestdataPermissionsRevokePost'
     *
     * @param  \NetSeven\KseF2Model\TestDataPermissionsRevokeRequest|null $test_data_permissions_revoke_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TestdataPermissionsRevokePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2TestdataPermissionsRevokePostRequest(
        ?\NetSeven\KseF2Model\TestDataPermissionsRevokeRequest $test_data_permissions_revoke_request = null,
        string $contentType = self::contentTypes['apiV2TestdataPermissionsRevokePost'][0]
    ): Request
    {



        $resourcePath = '/api/v2/testdata/permissions/revoke';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($test_data_permissions_revoke_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($test_data_permissions_revoke_request));
            } else {
                $httpBody = $test_data_permissions_revoke_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2TestdataPersonPost
     *
     * Utworzenie osoby fizycznej
     *
     * @param  \NetSeven\KseF2Model\PersonCreateRequest|null $person_create_request person_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TestdataPersonPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \NetSeven\KseF2Model\ExceptionResponse
     */
    public function apiV2TestdataPersonPost(
        ?\NetSeven\KseF2Model\PersonCreateRequest $person_create_request = null,
        string $contentType = self::contentTypes['apiV2TestdataPersonPost'][0]
    ): \NetSeven\KseF2Model\ExceptionResponse
    {
        list($response) = $this->apiV2TestdataPersonPostWithHttpInfo($person_create_request, $contentType);
        return $response;
    }

    /**
     * Operation apiV2TestdataPersonPostWithHttpInfo
     *
     * Utworzenie osoby fizycznej
     *
     * @param  \NetSeven\KseF2Model\PersonCreateRequest|null $person_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TestdataPersonPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2TestdataPersonPostWithHttpInfo(
        ?\NetSeven\KseF2Model\PersonCreateRequest $person_create_request = null,
        string $contentType = self::contentTypes['apiV2TestdataPersonPost'][0]
    ): array
    {
        $request = $this->apiV2TestdataPersonPostRequest($person_create_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NetSeven\KseF2Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation apiV2TestdataPersonPostAsync
     *
     * Utworzenie osoby fizycznej
     *
     * @param  \NetSeven\KseF2Model\PersonCreateRequest|null $person_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TestdataPersonPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiV2TestdataPersonPostAsync(
        ?\NetSeven\KseF2Model\PersonCreateRequest $person_create_request = null,
        string $contentType = self::contentTypes['apiV2TestdataPersonPost'][0]
    ): PromiseInterface
    {
        return $this->apiV2TestdataPersonPostAsyncWithHttpInfo($person_create_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2TestdataPersonPostAsyncWithHttpInfo
     *
     * Utworzenie osoby fizycznej
     *
     * @param  \NetSeven\KseF2Model\PersonCreateRequest|null $person_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TestdataPersonPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiV2TestdataPersonPostAsyncWithHttpInfo(
        ?\NetSeven\KseF2Model\PersonCreateRequest $person_create_request = null,
        string $contentType = self::contentTypes['apiV2TestdataPersonPost'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->apiV2TestdataPersonPostRequest($person_create_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2TestdataPersonPost'
     *
     * @param  \NetSeven\KseF2Model\PersonCreateRequest|null $person_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TestdataPersonPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2TestdataPersonPostRequest(
        ?\NetSeven\KseF2Model\PersonCreateRequest $person_create_request = null,
        string $contentType = self::contentTypes['apiV2TestdataPersonPost'][0]
    ): Request
    {



        $resourcePath = '/api/v2/testdata/person';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($person_create_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($person_create_request));
            } else {
                $httpBody = $person_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2TestdataPersonRemovePost
     *
     * Usunięcie osoby fizycznej
     *
     * @param  \NetSeven\KseF2Model\PersonRemoveRequest|null $person_remove_request person_remove_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TestdataPersonRemovePost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \NetSeven\KseF2Model\ExceptionResponse
     */
    public function apiV2TestdataPersonRemovePost(
        ?\NetSeven\KseF2Model\PersonRemoveRequest $person_remove_request = null,
        string $contentType = self::contentTypes['apiV2TestdataPersonRemovePost'][0]
    ): \NetSeven\KseF2Model\ExceptionResponse
    {
        list($response) = $this->apiV2TestdataPersonRemovePostWithHttpInfo($person_remove_request, $contentType);
        return $response;
    }

    /**
     * Operation apiV2TestdataPersonRemovePostWithHttpInfo
     *
     * Usunięcie osoby fizycznej
     *
     * @param  \NetSeven\KseF2Model\PersonRemoveRequest|null $person_remove_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TestdataPersonRemovePost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2TestdataPersonRemovePostWithHttpInfo(
        ?\NetSeven\KseF2Model\PersonRemoveRequest $person_remove_request = null,
        string $contentType = self::contentTypes['apiV2TestdataPersonRemovePost'][0]
    ): array
    {
        $request = $this->apiV2TestdataPersonRemovePostRequest($person_remove_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NetSeven\KseF2Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation apiV2TestdataPersonRemovePostAsync
     *
     * Usunięcie osoby fizycznej
     *
     * @param  \NetSeven\KseF2Model\PersonRemoveRequest|null $person_remove_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TestdataPersonRemovePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiV2TestdataPersonRemovePostAsync(
        ?\NetSeven\KseF2Model\PersonRemoveRequest $person_remove_request = null,
        string $contentType = self::contentTypes['apiV2TestdataPersonRemovePost'][0]
    ): PromiseInterface
    {
        return $this->apiV2TestdataPersonRemovePostAsyncWithHttpInfo($person_remove_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2TestdataPersonRemovePostAsyncWithHttpInfo
     *
     * Usunięcie osoby fizycznej
     *
     * @param  \NetSeven\KseF2Model\PersonRemoveRequest|null $person_remove_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TestdataPersonRemovePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiV2TestdataPersonRemovePostAsyncWithHttpInfo(
        ?\NetSeven\KseF2Model\PersonRemoveRequest $person_remove_request = null,
        string $contentType = self::contentTypes['apiV2TestdataPersonRemovePost'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->apiV2TestdataPersonRemovePostRequest($person_remove_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2TestdataPersonRemovePost'
     *
     * @param  \NetSeven\KseF2Model\PersonRemoveRequest|null $person_remove_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TestdataPersonRemovePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2TestdataPersonRemovePostRequest(
        ?\NetSeven\KseF2Model\PersonRemoveRequest $person_remove_request = null,
        string $contentType = self::contentTypes['apiV2TestdataPersonRemovePost'][0]
    ): Request
    {



        $resourcePath = '/api/v2/testdata/person/remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($person_remove_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($person_remove_request));
            } else {
                $httpBody = $person_remove_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2TestdataSubjectPost
     *
     * Utworzenie podmiotu
     *
     * @param  \NetSeven\KseF2Model\SubjectCreateRequest|null $subject_create_request subject_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TestdataSubjectPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \NetSeven\KseF2Model\ExceptionResponse
     */
    public function apiV2TestdataSubjectPost(
        ?\NetSeven\KseF2Model\SubjectCreateRequest $subject_create_request = null,
        string $contentType = self::contentTypes['apiV2TestdataSubjectPost'][0]
    ): \NetSeven\KseF2Model\ExceptionResponse
    {
        list($response) = $this->apiV2TestdataSubjectPostWithHttpInfo($subject_create_request, $contentType);
        return $response;
    }

    /**
     * Operation apiV2TestdataSubjectPostWithHttpInfo
     *
     * Utworzenie podmiotu
     *
     * @param  \NetSeven\KseF2Model\SubjectCreateRequest|null $subject_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TestdataSubjectPost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2TestdataSubjectPostWithHttpInfo(
        ?\NetSeven\KseF2Model\SubjectCreateRequest $subject_create_request = null,
        string $contentType = self::contentTypes['apiV2TestdataSubjectPost'][0]
    ): array
    {
        $request = $this->apiV2TestdataSubjectPostRequest($subject_create_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NetSeven\KseF2Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation apiV2TestdataSubjectPostAsync
     *
     * Utworzenie podmiotu
     *
     * @param  \NetSeven\KseF2Model\SubjectCreateRequest|null $subject_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TestdataSubjectPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiV2TestdataSubjectPostAsync(
        ?\NetSeven\KseF2Model\SubjectCreateRequest $subject_create_request = null,
        string $contentType = self::contentTypes['apiV2TestdataSubjectPost'][0]
    ): PromiseInterface
    {
        return $this->apiV2TestdataSubjectPostAsyncWithHttpInfo($subject_create_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2TestdataSubjectPostAsyncWithHttpInfo
     *
     * Utworzenie podmiotu
     *
     * @param  \NetSeven\KseF2Model\SubjectCreateRequest|null $subject_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TestdataSubjectPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiV2TestdataSubjectPostAsyncWithHttpInfo(
        ?\NetSeven\KseF2Model\SubjectCreateRequest $subject_create_request = null,
        string $contentType = self::contentTypes['apiV2TestdataSubjectPost'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->apiV2TestdataSubjectPostRequest($subject_create_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2TestdataSubjectPost'
     *
     * @param  \NetSeven\KseF2Model\SubjectCreateRequest|null $subject_create_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TestdataSubjectPost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2TestdataSubjectPostRequest(
        ?\NetSeven\KseF2Model\SubjectCreateRequest $subject_create_request = null,
        string $contentType = self::contentTypes['apiV2TestdataSubjectPost'][0]
    ): Request
    {



        $resourcePath = '/api/v2/testdata/subject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($subject_create_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($subject_create_request));
            } else {
                $httpBody = $subject_create_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2TestdataSubjectRemovePost
     *
     * Usunięcie podmiotu
     *
     * @param  \NetSeven\KseF2Model\SubjectRemoveRequest|null $subject_remove_request subject_remove_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TestdataSubjectRemovePost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \NetSeven\KseF2Model\ExceptionResponse
     */
    public function apiV2TestdataSubjectRemovePost(
        ?\NetSeven\KseF2Model\SubjectRemoveRequest $subject_remove_request = null,
        string $contentType = self::contentTypes['apiV2TestdataSubjectRemovePost'][0]
    ): \NetSeven\KseF2Model\ExceptionResponse
    {
        list($response) = $this->apiV2TestdataSubjectRemovePostWithHttpInfo($subject_remove_request, $contentType);
        return $response;
    }

    /**
     * Operation apiV2TestdataSubjectRemovePostWithHttpInfo
     *
     * Usunięcie podmiotu
     *
     * @param  \NetSeven\KseF2Model\SubjectRemoveRequest|null $subject_remove_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TestdataSubjectRemovePost'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2TestdataSubjectRemovePostWithHttpInfo(
        ?\NetSeven\KseF2Model\SubjectRemoveRequest $subject_remove_request = null,
        string $contentType = self::contentTypes['apiV2TestdataSubjectRemovePost'][0]
    ): array
    {
        $request = $this->apiV2TestdataSubjectRemovePostRequest($subject_remove_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\NetSeven\KseF2Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation apiV2TestdataSubjectRemovePostAsync
     *
     * Usunięcie podmiotu
     *
     * @param  \NetSeven\KseF2Model\SubjectRemoveRequest|null $subject_remove_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TestdataSubjectRemovePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiV2TestdataSubjectRemovePostAsync(
        ?\NetSeven\KseF2Model\SubjectRemoveRequest $subject_remove_request = null,
        string $contentType = self::contentTypes['apiV2TestdataSubjectRemovePost'][0]
    ): PromiseInterface
    {
        return $this->apiV2TestdataSubjectRemovePostAsyncWithHttpInfo($subject_remove_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2TestdataSubjectRemovePostAsyncWithHttpInfo
     *
     * Usunięcie podmiotu
     *
     * @param  \NetSeven\KseF2Model\SubjectRemoveRequest|null $subject_remove_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TestdataSubjectRemovePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function apiV2TestdataSubjectRemovePostAsyncWithHttpInfo(
        ?\NetSeven\KseF2Model\SubjectRemoveRequest $subject_remove_request = null,
        string $contentType = self::contentTypes['apiV2TestdataSubjectRemovePost'][0]
    ): PromiseInterface
    {
        $returnType = '';
        $request = $this->apiV2TestdataSubjectRemovePostRequest($subject_remove_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2TestdataSubjectRemovePost'
     *
     * @param  \NetSeven\KseF2Model\SubjectRemoveRequest|null $subject_remove_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2TestdataSubjectRemovePost'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2TestdataSubjectRemovePostRequest(
        ?\NetSeven\KseF2Model\SubjectRemoveRequest $subject_remove_request = null,
        string $contentType = self::contentTypes['apiV2TestdataSubjectRemovePost'][0]
    ): Request
    {



        $resourcePath = '/api/v2/testdata/subject/remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($subject_remove_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($subject_remove_request));
            } else {
                $httpBody = $subject_remove_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response,
    ): array {
        if (in_array($dataType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode,
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
