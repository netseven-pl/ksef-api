<?php
/**
 * StatusWysykiIUPOApi
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * KSeF API TE
 *
 * **Wersja API:** 2.0.0 (build 2.0.0-rc2-te-20250725.2+5adfde843e2c34f7d63e9a50dccbb9dab79bc320)<br>  **Klucze publiczne** Ministerstwa Finansów (dla danego środowiska): [Pobierz klucze](#tag/Certyfikaty-klucza-publicznego)<br>  **Historia zmian:** [Changelog](#)<br>  **Rozszerzona dokumentacja API:** [ksef-docs](https://github.com/CIRFMF/ksef-docs/tree/main)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\FormDataProcessor;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * StatusWysykiIUPOApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class StatusWysykiIUPOApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'apiV2SessionsGet' => [
            'application/json',
        ],
        'apiV2SessionsReferenceNumberGet' => [
            'application/json',
        ],
        'apiV2SessionsReferenceNumberInvoicesFailedGet' => [
            'application/json',
        ],
        'apiV2SessionsReferenceNumberInvoicesGet' => [
            'application/json',
        ],
        'apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGet' => [
            'application/json',
        ],
        'apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGet' => [
            'application/json',
        ],
        'apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGet' => [
            'application/json',
        ],
        'apiV2SessionsReferenceNumberUpoUpoReferenceNumberGet' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiV2SessionsGet
     *
     * Pobranie listy sesji
     *
     * @param  \OpenAPIClientModelSessionType $session_type Typ sesji.  | Wartość | Opis |  | --- | --- |  | Online | Wysyłka interaktywna (pojedyncze faktury). |  | Batch | Wysyłka wsadowa (paczka faktur). | (required)
     * @param  int|null $page_size Rozmiar strony. (optional)
     * @param  string|null $reference_number Numer referencyjny sesji. (optional)
     * @param  \DateTime|null $date_created_from Data utworzenia sesji (od). (optional)
     * @param  \DateTime|null $date_created_to Data utworzenia sesji (do). (optional)
     * @param  \DateTime|null $date_closed_from Data zamknięcia sesji (od). (optional)
     * @param  \DateTime|null $date_closed_to Data zamknięcia sesji (do). (optional)
     * @param  \DateTime|null $date_modified_from Data ostatniej aktywności (wysyłka faktury lub zmiana statusu) w ramach sesji (od). (optional)
     * @param  \DateTime|null $date_modified_to Data ostatniej aktywności (wysyłka faktury lub zmiana statusu) w ramach sesji (do). (optional)
     * @param  \OpenAPI\Client\Model\CommonSessionStatus[]|null $statuses Statusy sesji.  | Wartość | Opis |  | --- | --- |  | Succeeded | Sesja przetworzona poprawnie.            W trakcie przetwarzania sesji nie wystąpiły żadne błędy, ale część faktur nadal mogła zostać odrzucona. |  | InProgress | Sesja aktywna. |  | Failed | Sesja nie przetworzona z powodu błędów.            Na etapie rozpoczynania lub kończenia sesji wystąpiły błędy, które nie pozwoliły na jej poprawne przetworzenie. | (optional)
     * @param  string|null $x_continuation_token Token służący do pobrania kolejnej strony wyników. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SessionsQueryResponse|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function apiV2SessionsGet($session_type, $page_size = null, $reference_number = null, $date_created_from = null, $date_created_to = null, $date_closed_from = null, $date_closed_to = null, $date_modified_from = null, $date_modified_to = null, $statuses = null, $x_continuation_token = null, string $contentType = self::contentTypes['apiV2SessionsGet'][0])
    {
        list($response) = $this->apiV2SessionsGetWithHttpInfo($session_type, $page_size, $reference_number, $date_created_from, $date_created_to, $date_closed_from, $date_closed_to, $date_modified_from, $date_modified_to, $statuses, $x_continuation_token, $contentType);
        return $response;
    }

    /**
     * Operation apiV2SessionsGetWithHttpInfo
     *
     * Pobranie listy sesji
     *
     * @param  \OpenAPIClientModelSessionType $session_type Typ sesji.  | Wartość | Opis |  | --- | --- |  | Online | Wysyłka interaktywna (pojedyncze faktury). |  | Batch | Wysyłka wsadowa (paczka faktur). | (required)
     * @param  int|null $page_size Rozmiar strony. (optional)
     * @param  string|null $reference_number Numer referencyjny sesji. (optional)
     * @param  \DateTime|null $date_created_from Data utworzenia sesji (od). (optional)
     * @param  \DateTime|null $date_created_to Data utworzenia sesji (do). (optional)
     * @param  \DateTime|null $date_closed_from Data zamknięcia sesji (od). (optional)
     * @param  \DateTime|null $date_closed_to Data zamknięcia sesji (do). (optional)
     * @param  \DateTime|null $date_modified_from Data ostatniej aktywności (wysyłka faktury lub zmiana statusu) w ramach sesji (od). (optional)
     * @param  \DateTime|null $date_modified_to Data ostatniej aktywności (wysyłka faktury lub zmiana statusu) w ramach sesji (do). (optional)
     * @param  \OpenAPI\Client\Model\CommonSessionStatus[]|null $statuses Statusy sesji.  | Wartość | Opis |  | --- | --- |  | Succeeded | Sesja przetworzona poprawnie.            W trakcie przetwarzania sesji nie wystąpiły żadne błędy, ale część faktur nadal mogła zostać odrzucona. |  | InProgress | Sesja aktywna. |  | Failed | Sesja nie przetworzona z powodu błędów.            Na etapie rozpoczynania lub kończenia sesji wystąpiły błędy, które nie pozwoliły na jej poprawne przetworzenie. | (optional)
     * @param  string|null $x_continuation_token Token służący do pobrania kolejnej strony wyników. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SessionsQueryResponse|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SessionsGetWithHttpInfo($session_type, $page_size = null, $reference_number = null, $date_created_from = null, $date_created_to = null, $date_closed_from = null, $date_closed_to = null, $date_modified_from = null, $date_modified_to = null, $statuses = null, $x_continuation_token = null, string $contentType = self::contentTypes['apiV2SessionsGet'][0])
    {
        $request = $this->apiV2SessionsGetRequest($session_type, $page_size, $reference_number, $date_created_from, $date_created_to, $date_closed_from, $date_closed_to, $date_modified_from, $date_modified_to, $statuses, $x_continuation_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\SessionsQueryResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\SessionsQueryResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SessionsQueryResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiV2SessionsGetAsync
     *
     * Pobranie listy sesji
     *
     * @param  \OpenAPIClientModelSessionType $session_type Typ sesji.  | Wartość | Opis |  | --- | --- |  | Online | Wysyłka interaktywna (pojedyncze faktury). |  | Batch | Wysyłka wsadowa (paczka faktur). | (required)
     * @param  int|null $page_size Rozmiar strony. (optional)
     * @param  string|null $reference_number Numer referencyjny sesji. (optional)
     * @param  \DateTime|null $date_created_from Data utworzenia sesji (od). (optional)
     * @param  \DateTime|null $date_created_to Data utworzenia sesji (do). (optional)
     * @param  \DateTime|null $date_closed_from Data zamknięcia sesji (od). (optional)
     * @param  \DateTime|null $date_closed_to Data zamknięcia sesji (do). (optional)
     * @param  \DateTime|null $date_modified_from Data ostatniej aktywności (wysyłka faktury lub zmiana statusu) w ramach sesji (od). (optional)
     * @param  \DateTime|null $date_modified_to Data ostatniej aktywności (wysyłka faktury lub zmiana statusu) w ramach sesji (do). (optional)
     * @param  \OpenAPI\Client\Model\CommonSessionStatus[]|null $statuses Statusy sesji.  | Wartość | Opis |  | --- | --- |  | Succeeded | Sesja przetworzona poprawnie.            W trakcie przetwarzania sesji nie wystąpiły żadne błędy, ale część faktur nadal mogła zostać odrzucona. |  | InProgress | Sesja aktywna. |  | Failed | Sesja nie przetworzona z powodu błędów.            Na etapie rozpoczynania lub kończenia sesji wystąpiły błędy, które nie pozwoliły na jej poprawne przetworzenie. | (optional)
     * @param  string|null $x_continuation_token Token służący do pobrania kolejnej strony wyników. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SessionsGetAsync($session_type, $page_size = null, $reference_number = null, $date_created_from = null, $date_created_to = null, $date_closed_from = null, $date_closed_to = null, $date_modified_from = null, $date_modified_to = null, $statuses = null, $x_continuation_token = null, string $contentType = self::contentTypes['apiV2SessionsGet'][0])
    {
        return $this->apiV2SessionsGetAsyncWithHttpInfo($session_type, $page_size, $reference_number, $date_created_from, $date_created_to, $date_closed_from, $date_closed_to, $date_modified_from, $date_modified_to, $statuses, $x_continuation_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SessionsGetAsyncWithHttpInfo
     *
     * Pobranie listy sesji
     *
     * @param  \OpenAPIClientModelSessionType $session_type Typ sesji.  | Wartość | Opis |  | --- | --- |  | Online | Wysyłka interaktywna (pojedyncze faktury). |  | Batch | Wysyłka wsadowa (paczka faktur). | (required)
     * @param  int|null $page_size Rozmiar strony. (optional)
     * @param  string|null $reference_number Numer referencyjny sesji. (optional)
     * @param  \DateTime|null $date_created_from Data utworzenia sesji (od). (optional)
     * @param  \DateTime|null $date_created_to Data utworzenia sesji (do). (optional)
     * @param  \DateTime|null $date_closed_from Data zamknięcia sesji (od). (optional)
     * @param  \DateTime|null $date_closed_to Data zamknięcia sesji (do). (optional)
     * @param  \DateTime|null $date_modified_from Data ostatniej aktywności (wysyłka faktury lub zmiana statusu) w ramach sesji (od). (optional)
     * @param  \DateTime|null $date_modified_to Data ostatniej aktywności (wysyłka faktury lub zmiana statusu) w ramach sesji (do). (optional)
     * @param  \OpenAPI\Client\Model\CommonSessionStatus[]|null $statuses Statusy sesji.  | Wartość | Opis |  | --- | --- |  | Succeeded | Sesja przetworzona poprawnie.            W trakcie przetwarzania sesji nie wystąpiły żadne błędy, ale część faktur nadal mogła zostać odrzucona. |  | InProgress | Sesja aktywna. |  | Failed | Sesja nie przetworzona z powodu błędów.            Na etapie rozpoczynania lub kończenia sesji wystąpiły błędy, które nie pozwoliły na jej poprawne przetworzenie. | (optional)
     * @param  string|null $x_continuation_token Token służący do pobrania kolejnej strony wyników. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SessionsGetAsyncWithHttpInfo($session_type, $page_size = null, $reference_number = null, $date_created_from = null, $date_created_to = null, $date_closed_from = null, $date_closed_to = null, $date_modified_from = null, $date_modified_to = null, $statuses = null, $x_continuation_token = null, string $contentType = self::contentTypes['apiV2SessionsGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SessionsQueryResponse';
        $request = $this->apiV2SessionsGetRequest($session_type, $page_size, $reference_number, $date_created_from, $date_created_to, $date_closed_from, $date_closed_to, $date_modified_from, $date_modified_to, $statuses, $x_continuation_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SessionsGet'
     *
     * @param  \OpenAPIClientModelSessionType $session_type Typ sesji.  | Wartość | Opis |  | --- | --- |  | Online | Wysyłka interaktywna (pojedyncze faktury). |  | Batch | Wysyłka wsadowa (paczka faktur). | (required)
     * @param  int|null $page_size Rozmiar strony. (optional)
     * @param  string|null $reference_number Numer referencyjny sesji. (optional)
     * @param  \DateTime|null $date_created_from Data utworzenia sesji (od). (optional)
     * @param  \DateTime|null $date_created_to Data utworzenia sesji (do). (optional)
     * @param  \DateTime|null $date_closed_from Data zamknięcia sesji (od). (optional)
     * @param  \DateTime|null $date_closed_to Data zamknięcia sesji (do). (optional)
     * @param  \DateTime|null $date_modified_from Data ostatniej aktywności (wysyłka faktury lub zmiana statusu) w ramach sesji (od). (optional)
     * @param  \DateTime|null $date_modified_to Data ostatniej aktywności (wysyłka faktury lub zmiana statusu) w ramach sesji (do). (optional)
     * @param  \OpenAPI\Client\Model\CommonSessionStatus[]|null $statuses Statusy sesji.  | Wartość | Opis |  | --- | --- |  | Succeeded | Sesja przetworzona poprawnie.            W trakcie przetwarzania sesji nie wystąpiły żadne błędy, ale część faktur nadal mogła zostać odrzucona. |  | InProgress | Sesja aktywna. |  | Failed | Sesja nie przetworzona z powodu błędów.            Na etapie rozpoczynania lub kończenia sesji wystąpiły błędy, które nie pozwoliły na jej poprawne przetworzenie. | (optional)
     * @param  string|null $x_continuation_token Token służący do pobrania kolejnej strony wyników. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SessionsGetRequest($session_type, $page_size = null, $reference_number = null, $date_created_from = null, $date_created_to = null, $date_closed_from = null, $date_closed_to = null, $date_modified_from = null, $date_modified_to = null, $statuses = null, $x_continuation_token = null, string $contentType = self::contentTypes['apiV2SessionsGet'][0])
    {

        // verify the required parameter 'session_type' is set
        if ($session_type === null || (is_array($session_type) && count($session_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $session_type when calling apiV2SessionsGet'
            );
        }












        $resourcePath = '/api/v2/sessions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $session_type,
            'sessionType', // param base name
            'SessionType', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $reference_number,
            'referenceNumber', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_created_from,
            'dateCreatedFrom', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_created_to,
            'dateCreatedTo', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_closed_from,
            'dateClosedFrom', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_closed_to,
            'dateClosedTo', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_modified_from,
            'dateModifiedFrom', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_modified_to,
            'dateModifiedTo', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $statuses,
            'statuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_continuation_token !== null) {
            $headerParams['x-continuation-token'] = ObjectSerializer::toHeaderValue($x_continuation_token);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SessionsReferenceNumberGet
     *
     * Pobranie statusu sesji
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SessionStatusResponse|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function apiV2SessionsReferenceNumberGet($reference_number, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberGet'][0])
    {
        list($response) = $this->apiV2SessionsReferenceNumberGetWithHttpInfo($reference_number, $contentType);
        return $response;
    }

    /**
     * Operation apiV2SessionsReferenceNumberGetWithHttpInfo
     *
     * Pobranie statusu sesji
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SessionStatusResponse|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SessionsReferenceNumberGetWithHttpInfo($reference_number, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberGet'][0])
    {
        $request = $this->apiV2SessionsReferenceNumberGetRequest($reference_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\SessionStatusResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\SessionStatusResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SessionStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiV2SessionsReferenceNumberGetAsync
     *
     * Pobranie statusu sesji
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SessionsReferenceNumberGetAsync($reference_number, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberGet'][0])
    {
        return $this->apiV2SessionsReferenceNumberGetAsyncWithHttpInfo($reference_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SessionsReferenceNumberGetAsyncWithHttpInfo
     *
     * Pobranie statusu sesji
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SessionsReferenceNumberGetAsyncWithHttpInfo($reference_number, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SessionStatusResponse';
        $request = $this->apiV2SessionsReferenceNumberGetRequest($reference_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SessionsReferenceNumberGet'
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SessionsReferenceNumberGetRequest($reference_number, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberGet'][0])
    {

        // verify the required parameter 'reference_number' is set
        if ($reference_number === null || (is_array($reference_number) && count($reference_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference_number when calling apiV2SessionsReferenceNumberGet'
            );
        }


        $resourcePath = '/api/v2/sessions/{referenceNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($reference_number !== null) {
            $resourcePath = str_replace(
                '{' . 'referenceNumber' . '}',
                ObjectSerializer::toPathValue($reference_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SessionsReferenceNumberInvoicesFailedGet
     *
     * Pobranie niepoprawnie przetworzonych faktur sesji
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  string|null $x_continuation_token Token służący do pobrania kolejnej strony wyników. (optional)
     * @param  int|null $page_size Rozmiar strony wyników. (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberInvoicesFailedGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SessionInvoicesResponse|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function apiV2SessionsReferenceNumberInvoicesFailedGet($reference_number, $x_continuation_token = null, $page_size = 10, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberInvoicesFailedGet'][0])
    {
        list($response) = $this->apiV2SessionsReferenceNumberInvoicesFailedGetWithHttpInfo($reference_number, $x_continuation_token, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation apiV2SessionsReferenceNumberInvoicesFailedGetWithHttpInfo
     *
     * Pobranie niepoprawnie przetworzonych faktur sesji
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  string|null $x_continuation_token Token służący do pobrania kolejnej strony wyników. (optional)
     * @param  int|null $page_size Rozmiar strony wyników. (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberInvoicesFailedGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SessionInvoicesResponse|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SessionsReferenceNumberInvoicesFailedGetWithHttpInfo($reference_number, $x_continuation_token = null, $page_size = 10, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberInvoicesFailedGet'][0])
    {
        $request = $this->apiV2SessionsReferenceNumberInvoicesFailedGetRequest($reference_number, $x_continuation_token, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\SessionInvoicesResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\SessionInvoicesResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SessionInvoicesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiV2SessionsReferenceNumberInvoicesFailedGetAsync
     *
     * Pobranie niepoprawnie przetworzonych faktur sesji
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  string|null $x_continuation_token Token służący do pobrania kolejnej strony wyników. (optional)
     * @param  int|null $page_size Rozmiar strony wyników. (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberInvoicesFailedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SessionsReferenceNumberInvoicesFailedGetAsync($reference_number, $x_continuation_token = null, $page_size = 10, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberInvoicesFailedGet'][0])
    {
        return $this->apiV2SessionsReferenceNumberInvoicesFailedGetAsyncWithHttpInfo($reference_number, $x_continuation_token, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SessionsReferenceNumberInvoicesFailedGetAsyncWithHttpInfo
     *
     * Pobranie niepoprawnie przetworzonych faktur sesji
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  string|null $x_continuation_token Token służący do pobrania kolejnej strony wyników. (optional)
     * @param  int|null $page_size Rozmiar strony wyników. (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberInvoicesFailedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SessionsReferenceNumberInvoicesFailedGetAsyncWithHttpInfo($reference_number, $x_continuation_token = null, $page_size = 10, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberInvoicesFailedGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SessionInvoicesResponse';
        $request = $this->apiV2SessionsReferenceNumberInvoicesFailedGetRequest($reference_number, $x_continuation_token, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SessionsReferenceNumberInvoicesFailedGet'
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  string|null $x_continuation_token Token służący do pobrania kolejnej strony wyników. (optional)
     * @param  int|null $page_size Rozmiar strony wyników. (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberInvoicesFailedGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SessionsReferenceNumberInvoicesFailedGetRequest($reference_number, $x_continuation_token = null, $page_size = 10, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberInvoicesFailedGet'][0])
    {

        // verify the required parameter 'reference_number' is set
        if ($reference_number === null || (is_array($reference_number) && count($reference_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference_number when calling apiV2SessionsReferenceNumberInvoicesFailedGet'
            );
        }




        $resourcePath = '/api/v2/sessions/{referenceNumber}/invoices/failed';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($x_continuation_token !== null) {
            $headerParams['x-continuation-token'] = ObjectSerializer::toHeaderValue($x_continuation_token);
        }

        // path params
        if ($reference_number !== null) {
            $resourcePath = str_replace(
                '{' . 'referenceNumber' . '}',
                ObjectSerializer::toPathValue($reference_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SessionsReferenceNumberInvoicesGet
     *
     * Pobranie faktur sesji
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  int|null $page_offset Numer strony wyników. (optional, default to 0)
     * @param  int|null $page_size Rozmiar strony wyników. (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberInvoicesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SessionInvoicesResponse|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function apiV2SessionsReferenceNumberInvoicesGet($reference_number, $page_offset = 0, $page_size = 10, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberInvoicesGet'][0])
    {
        list($response) = $this->apiV2SessionsReferenceNumberInvoicesGetWithHttpInfo($reference_number, $page_offset, $page_size, $contentType);
        return $response;
    }

    /**
     * Operation apiV2SessionsReferenceNumberInvoicesGetWithHttpInfo
     *
     * Pobranie faktur sesji
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  int|null $page_offset Numer strony wyników. (optional, default to 0)
     * @param  int|null $page_size Rozmiar strony wyników. (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberInvoicesGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SessionInvoicesResponse|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SessionsReferenceNumberInvoicesGetWithHttpInfo($reference_number, $page_offset = 0, $page_size = 10, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberInvoicesGet'][0])
    {
        $request = $this->apiV2SessionsReferenceNumberInvoicesGetRequest($reference_number, $page_offset, $page_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\SessionInvoicesResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\SessionInvoicesResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SessionInvoicesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiV2SessionsReferenceNumberInvoicesGetAsync
     *
     * Pobranie faktur sesji
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  int|null $page_offset Numer strony wyników. (optional, default to 0)
     * @param  int|null $page_size Rozmiar strony wyników. (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberInvoicesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SessionsReferenceNumberInvoicesGetAsync($reference_number, $page_offset = 0, $page_size = 10, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberInvoicesGet'][0])
    {
        return $this->apiV2SessionsReferenceNumberInvoicesGetAsyncWithHttpInfo($reference_number, $page_offset, $page_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SessionsReferenceNumberInvoicesGetAsyncWithHttpInfo
     *
     * Pobranie faktur sesji
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  int|null $page_offset Numer strony wyników. (optional, default to 0)
     * @param  int|null $page_size Rozmiar strony wyników. (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberInvoicesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SessionsReferenceNumberInvoicesGetAsyncWithHttpInfo($reference_number, $page_offset = 0, $page_size = 10, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberInvoicesGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SessionInvoicesResponse';
        $request = $this->apiV2SessionsReferenceNumberInvoicesGetRequest($reference_number, $page_offset, $page_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SessionsReferenceNumberInvoicesGet'
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  int|null $page_offset Numer strony wyników. (optional, default to 0)
     * @param  int|null $page_size Rozmiar strony wyników. (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberInvoicesGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SessionsReferenceNumberInvoicesGetRequest($reference_number, $page_offset = 0, $page_size = 10, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberInvoicesGet'][0])
    {

        // verify the required parameter 'reference_number' is set
        if ($reference_number === null || (is_array($reference_number) && count($reference_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference_number when calling apiV2SessionsReferenceNumberInvoicesGet'
            );
        }




        $resourcePath = '/api/v2/sessions/{referenceNumber}/invoices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_offset,
            'pageOffset', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($reference_number !== null) {
            $resourcePath = str_replace(
                '{' . 'referenceNumber' . '}',
                ObjectSerializer::toPathValue($reference_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGet
     *
     * Pobranie statusu faktury z sesji
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  string $invoice_reference_number Numer referencyjny faktury. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InvoiceStatusResponse|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGet($reference_number, $invoice_reference_number, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGet'][0])
    {
        list($response) = $this->apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGetWithHttpInfo($reference_number, $invoice_reference_number, $contentType);
        return $response;
    }

    /**
     * Operation apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGetWithHttpInfo
     *
     * Pobranie statusu faktury z sesji
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  string $invoice_reference_number Numer referencyjny faktury. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InvoiceStatusResponse|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGetWithHttpInfo($reference_number, $invoice_reference_number, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGet'][0])
    {
        $request = $this->apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGetRequest($reference_number, $invoice_reference_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\InvoiceStatusResponse',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\OpenAPI\Client\Model\InvoiceStatusResponse',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InvoiceStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGetAsync
     *
     * Pobranie statusu faktury z sesji
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  string $invoice_reference_number Numer referencyjny faktury. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGetAsync($reference_number, $invoice_reference_number, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGet'][0])
    {
        return $this->apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGetAsyncWithHttpInfo($reference_number, $invoice_reference_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGetAsyncWithHttpInfo
     *
     * Pobranie statusu faktury z sesji
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  string $invoice_reference_number Numer referencyjny faktury. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGetAsyncWithHttpInfo($reference_number, $invoice_reference_number, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGet'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InvoiceStatusResponse';
        $request = $this->apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGetRequest($reference_number, $invoice_reference_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGet'
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  string $invoice_reference_number Numer referencyjny faktury. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGetRequest($reference_number, $invoice_reference_number, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGet'][0])
    {

        // verify the required parameter 'reference_number' is set
        if ($reference_number === null || (is_array($reference_number) && count($reference_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference_number when calling apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGet'
            );
        }

        // verify the required parameter 'invoice_reference_number' is set
        if ($invoice_reference_number === null || (is_array($invoice_reference_number) && count($invoice_reference_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_reference_number when calling apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberGet'
            );
        }


        $resourcePath = '/api/v2/sessions/{referenceNumber}/invoices/{invoiceReferenceNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($reference_number !== null) {
            $resourcePath = str_replace(
                '{' . 'referenceNumber' . '}',
                ObjectSerializer::toPathValue($reference_number),
                $resourcePath
            );
        }
        // path params
        if ($invoice_reference_number !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceReferenceNumber' . '}',
                ObjectSerializer::toPathValue($invoice_reference_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGet
     *
     * Pobranie UPO faktury z sesji na podstawie numeru referencyjnego faktury
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  string $invoice_reference_number Numer referencyjny faktury. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGet($reference_number, $invoice_reference_number, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGet'][0])
    {
        list($response) = $this->apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGetWithHttpInfo($reference_number, $invoice_reference_number, $contentType);
        return $response;
    }

    /**
     * Operation apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGetWithHttpInfo
     *
     * Pobranie UPO faktury z sesji na podstawie numeru referencyjnego faktury
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  string $invoice_reference_number Numer referencyjny faktury. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGetWithHttpInfo($reference_number, $invoice_reference_number, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGet'][0])
    {
        $request = $this->apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGetRequest($reference_number, $invoice_reference_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'string',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'string',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGetAsync
     *
     * Pobranie UPO faktury z sesji na podstawie numeru referencyjnego faktury
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  string $invoice_reference_number Numer referencyjny faktury. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGetAsync($reference_number, $invoice_reference_number, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGet'][0])
    {
        return $this->apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGetAsyncWithHttpInfo($reference_number, $invoice_reference_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGetAsyncWithHttpInfo
     *
     * Pobranie UPO faktury z sesji na podstawie numeru referencyjnego faktury
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  string $invoice_reference_number Numer referencyjny faktury. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGetAsyncWithHttpInfo($reference_number, $invoice_reference_number, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGet'][0])
    {
        $returnType = 'string';
        $request = $this->apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGetRequest($reference_number, $invoice_reference_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGet'
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  string $invoice_reference_number Numer referencyjny faktury. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGetRequest($reference_number, $invoice_reference_number, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGet'][0])
    {

        // verify the required parameter 'reference_number' is set
        if ($reference_number === null || (is_array($reference_number) && count($reference_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference_number when calling apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGet'
            );
        }

        // verify the required parameter 'invoice_reference_number' is set
        if ($invoice_reference_number === null || (is_array($invoice_reference_number) && count($invoice_reference_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $invoice_reference_number when calling apiV2SessionsReferenceNumberInvoicesInvoiceReferenceNumberUpoGet'
            );
        }


        $resourcePath = '/api/v2/sessions/{referenceNumber}/invoices/{invoiceReferenceNumber}/upo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($reference_number !== null) {
            $resourcePath = str_replace(
                '{' . 'referenceNumber' . '}',
                ObjectSerializer::toPathValue($reference_number),
                $resourcePath
            );
        }
        // path params
        if ($invoice_reference_number !== null) {
            $resourcePath = str_replace(
                '{' . 'invoiceReferenceNumber' . '}',
                ObjectSerializer::toPathValue($invoice_reference_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/xml', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGet
     *
     * Pobranie UPO faktury z sesji na podstawie numeru KSeF
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  string $ksef_number Numer KSeF faktury. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGet($reference_number, $ksef_number, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGet'][0])
    {
        list($response) = $this->apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGetWithHttpInfo($reference_number, $ksef_number, $contentType);
        return $response;
    }

    /**
     * Operation apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGetWithHttpInfo
     *
     * Pobranie UPO faktury z sesji na podstawie numeru KSeF
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  string $ksef_number Numer KSeF faktury. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGetWithHttpInfo($reference_number, $ksef_number, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGet'][0])
    {
        $request = $this->apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGetRequest($reference_number, $ksef_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'string',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'string',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGetAsync
     *
     * Pobranie UPO faktury z sesji na podstawie numeru KSeF
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  string $ksef_number Numer KSeF faktury. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGetAsync($reference_number, $ksef_number, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGet'][0])
    {
        return $this->apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGetAsyncWithHttpInfo($reference_number, $ksef_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGetAsyncWithHttpInfo
     *
     * Pobranie UPO faktury z sesji na podstawie numeru KSeF
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  string $ksef_number Numer KSeF faktury. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGetAsyncWithHttpInfo($reference_number, $ksef_number, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGet'][0])
    {
        $returnType = 'string';
        $request = $this->apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGetRequest($reference_number, $ksef_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGet'
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  string $ksef_number Numer KSeF faktury. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGetRequest($reference_number, $ksef_number, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGet'][0])
    {

        // verify the required parameter 'reference_number' is set
        if ($reference_number === null || (is_array($reference_number) && count($reference_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference_number when calling apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGet'
            );
        }

        // verify the required parameter 'ksef_number' is set
        if ($ksef_number === null || (is_array($ksef_number) && count($ksef_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ksef_number when calling apiV2SessionsReferenceNumberInvoicesKsefKsefNumberUpoGet'
            );
        }


        $resourcePath = '/api/v2/sessions/{referenceNumber}/invoices/ksef/{ksefNumber}/upo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($reference_number !== null) {
            $resourcePath = str_replace(
                '{' . 'referenceNumber' . '}',
                ObjectSerializer::toPathValue($reference_number),
                $resourcePath
            );
        }
        // path params
        if ($ksef_number !== null) {
            $resourcePath = str_replace(
                '{' . 'ksefNumber' . '}',
                ObjectSerializer::toPathValue($ksef_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/xml', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiV2SessionsReferenceNumberUpoUpoReferenceNumberGet
     *
     * Pobranie UPO dla sesji
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  string $upo_reference_number Numer referencyjny UPO. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberUpoUpoReferenceNumberGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string|\OpenAPI\Client\Model\ExceptionResponse
     */
    public function apiV2SessionsReferenceNumberUpoUpoReferenceNumberGet($reference_number, $upo_reference_number, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberUpoUpoReferenceNumberGet'][0])
    {
        list($response) = $this->apiV2SessionsReferenceNumberUpoUpoReferenceNumberGetWithHttpInfo($reference_number, $upo_reference_number, $contentType);
        return $response;
    }

    /**
     * Operation apiV2SessionsReferenceNumberUpoUpoReferenceNumberGetWithHttpInfo
     *
     * Pobranie UPO dla sesji
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  string $upo_reference_number Numer referencyjny UPO. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberUpoUpoReferenceNumberGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string|\OpenAPI\Client\Model\ExceptionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiV2SessionsReferenceNumberUpoUpoReferenceNumberGetWithHttpInfo($reference_number, $upo_reference_number, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberUpoUpoReferenceNumberGet'][0])
    {
        $request = $this->apiV2SessionsReferenceNumberUpoUpoReferenceNumberGetRequest($reference_number, $upo_reference_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        'string',
                        $request,
                        $response,
                    );
                case 400:
                    return $this->handleResponseWithDataType(
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $request,
                        $response,
                    );
            }

            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                'string',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ExceptionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        

            throw $e;
        }
    }

    /**
     * Operation apiV2SessionsReferenceNumberUpoUpoReferenceNumberGetAsync
     *
     * Pobranie UPO dla sesji
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  string $upo_reference_number Numer referencyjny UPO. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberUpoUpoReferenceNumberGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SessionsReferenceNumberUpoUpoReferenceNumberGetAsync($reference_number, $upo_reference_number, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberUpoUpoReferenceNumberGet'][0])
    {
        return $this->apiV2SessionsReferenceNumberUpoUpoReferenceNumberGetAsyncWithHttpInfo($reference_number, $upo_reference_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiV2SessionsReferenceNumberUpoUpoReferenceNumberGetAsyncWithHttpInfo
     *
     * Pobranie UPO dla sesji
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  string $upo_reference_number Numer referencyjny UPO. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberUpoUpoReferenceNumberGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiV2SessionsReferenceNumberUpoUpoReferenceNumberGetAsyncWithHttpInfo($reference_number, $upo_reference_number, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberUpoUpoReferenceNumberGet'][0])
    {
        $returnType = 'string';
        $request = $this->apiV2SessionsReferenceNumberUpoUpoReferenceNumberGetRequest($reference_number, $upo_reference_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'apiV2SessionsReferenceNumberUpoUpoReferenceNumberGet'
     *
     * @param  string $reference_number Numer referencyjny sesji. (required)
     * @param  string $upo_reference_number Numer referencyjny UPO. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['apiV2SessionsReferenceNumberUpoUpoReferenceNumberGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiV2SessionsReferenceNumberUpoUpoReferenceNumberGetRequest($reference_number, $upo_reference_number, string $contentType = self::contentTypes['apiV2SessionsReferenceNumberUpoUpoReferenceNumberGet'][0])
    {

        // verify the required parameter 'reference_number' is set
        if ($reference_number === null || (is_array($reference_number) && count($reference_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $reference_number when calling apiV2SessionsReferenceNumberUpoUpoReferenceNumberGet'
            );
        }

        // verify the required parameter 'upo_reference_number' is set
        if ($upo_reference_number === null || (is_array($upo_reference_number) && count($upo_reference_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $upo_reference_number when calling apiV2SessionsReferenceNumberUpoUpoReferenceNumberGet'
            );
        }


        $resourcePath = '/api/v2/sessions/{referenceNumber}/upo/{upoReferenceNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($reference_number !== null) {
            $resourcePath = str_replace(
                '{' . 'referenceNumber' . '}',
                ObjectSerializer::toPathValue($reference_number),
                $resourcePath
            );
        }
        // path params
        if ($upo_reference_number !== null) {
            $resourcePath = str_replace(
                '{' . 'upoReferenceNumber' . '}',
                ObjectSerializer::toPathValue($upo_reference_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/xml', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response
    ): array {
        if ($dataType === '\SplFileObject') {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
