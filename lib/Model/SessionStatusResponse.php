<?php
/**
 * SessionStatusResponse
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * KSeF API TE
 *
 * **Wersja API:** 2.0.0 (build 2.0.0-rc2-te-20250725.2+5adfde843e2c34f7d63e9a50dccbb9dab79bc320)<br>  **Klucze publiczne** Ministerstwa Finansów (dla danego środowiska): [Pobierz klucze](#tag/Certyfikaty-klucza-publicznego)<br>  **Historia zmian:** [Changelog](#)<br>  **Rozszerzona dokumentacja API:** [ksef-docs](https://github.com/CIRFMF/ksef-docs/tree/main)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SessionStatusResponse Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SessionStatusResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SessionStatusResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'status' => '\OpenAPI\Client\Model\StatusInfo',
        'upo' => '\OpenAPI\Client\Model\UpoResponse',
        'invoice_count' => 'int',
        'successful_invoice_count' => 'int',
        'failed_invoice_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'status' => null,
        'upo' => null,
        'invoice_count' => 'int32',
        'successful_invoice_count' => 'int32',
        'failed_invoice_count' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'status' => false,
        'upo' => true,
        'invoice_count' => true,
        'successful_invoice_count' => true,
        'failed_invoice_count' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'status' => 'status',
        'upo' => 'upo',
        'invoice_count' => 'invoiceCount',
        'successful_invoice_count' => 'successfulInvoiceCount',
        'failed_invoice_count' => 'failedInvoiceCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'status' => 'setStatus',
        'upo' => 'setUpo',
        'invoice_count' => 'setInvoiceCount',
        'successful_invoice_count' => 'setSuccessfulInvoiceCount',
        'failed_invoice_count' => 'setFailedInvoiceCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'status' => 'getStatus',
        'upo' => 'getUpo',
        'invoice_count' => 'getInvoiceCount',
        'successful_invoice_count' => 'getSuccessfulInvoiceCount',
        'failed_invoice_count' => 'getFailedInvoiceCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('upo', $data ?? [], null);
        $this->setIfExists('invoice_count', $data ?? [], null);
        $this->setIfExists('successful_invoice_count', $data ?? [], null);
        $this->setIfExists('failed_invoice_count', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\StatusInfo
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\StatusInfo $status Informacje o aktualnym statusie.                Sesja wsadowa:  | Code | Description | Details |  | --- | --- | --- |  | 100 | Sesja wsadowa rozpoczęta | - |  | 200 | Sesja wsadowa przetworzona pomyślnie | - |  | 300 | Trwa przetwarzanie | - |  | 405 | Błąd weryfikacji poprawności dostarczonych elementów paczki | - |  | 415 | Błąd odszyfrowania dostarczonego klucza | - |  | 430 | Błąd dekompresji pierwotnego archiwum | - |  | 435 | Błąd odszyfrowania zaszyfrowanych części archiwum | - |  | 500 | Nieznany błąd ({statusCode}) | - |    Sesja interaktywna:  | Code | Description | Details |  | --- | --- | --- |  | 100 | Sesja interaktywna otwarta | - |  | 200 | Sesja interaktywna przetworzona pomyślnie | - |  | 300 | Sesja interaktywna zamknięta | - |  | 415 | Błąd odszyfrowania dostarczonego klucza | - |  | * | description missing | - |
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets upo
     *
     * @return \OpenAPI\Client\Model\UpoResponse|null
     */
    public function getUpo()
    {
        return $this->container['upo'];
    }

    /**
     * Sets upo
     *
     * @param \OpenAPI\Client\Model\UpoResponse|null $upo Informacja o UPO sesyjnym, zwracana gdy sesja została zamknięta i UPO zostało wygenerowane.
     *
     * @return self
     */
    public function setUpo($upo)
    {
        if (is_null($upo)) {
            array_push($this->openAPINullablesSetToNull, 'upo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('upo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['upo'] = $upo;

        return $this;
    }

    /**
     * Gets invoice_count
     *
     * @return int|null
     */
    public function getInvoiceCount()
    {
        return $this->container['invoice_count'];
    }

    /**
     * Sets invoice_count
     *
     * @param int|null $invoice_count Ilość przyjętych faktur w ramach sesji.
     *
     * @return self
     */
    public function setInvoiceCount($invoice_count)
    {
        if (is_null($invoice_count)) {
            array_push($this->openAPINullablesSetToNull, 'invoice_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoice_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoice_count'] = $invoice_count;

        return $this;
    }

    /**
     * Gets successful_invoice_count
     *
     * @return int|null
     */
    public function getSuccessfulInvoiceCount()
    {
        return $this->container['successful_invoice_count'];
    }

    /**
     * Sets successful_invoice_count
     *
     * @param int|null $successful_invoice_count Ilość faktur przeprocesowanych w ramach sesji z sukcesem .
     *
     * @return self
     */
    public function setSuccessfulInvoiceCount($successful_invoice_count)
    {
        if (is_null($successful_invoice_count)) {
            array_push($this->openAPINullablesSetToNull, 'successful_invoice_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('successful_invoice_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['successful_invoice_count'] = $successful_invoice_count;

        return $this;
    }

    /**
     * Gets failed_invoice_count
     *
     * @return int|null
     */
    public function getFailedInvoiceCount()
    {
        return $this->container['failed_invoice_count'];
    }

    /**
     * Sets failed_invoice_count
     *
     * @param int|null $failed_invoice_count Ilość faktur przeprocesowanych w ramach sesji z błędem.
     *
     * @return self
     */
    public function setFailedInvoiceCount($failed_invoice_count)
    {
        if (is_null($failed_invoice_count)) {
            array_push($this->openAPINullablesSetToNull, 'failed_invoice_count');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('failed_invoice_count', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['failed_invoice_count'] = $failed_invoice_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


