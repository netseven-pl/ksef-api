<?php
/**
 * EntityAuthorizationGrant
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * KSeF API TE
 *
 * **Wersja API:** 2.0.0 (build 2.0.0-rc2-te-20250725.2+5adfde843e2c34f7d63e9a50dccbb9dab79bc320)<br>  **Klucze publiczne** Ministerstwa Finansów (dla danego środowiska): [Pobierz klucze](#tag/Certyfikaty-klucza-publicznego)<br>  **Historia zmian:** [Changelog](#)<br>  **Rozszerzona dokumentacja API:** [ksef-docs](https://github.com/CIRFMF/ksef-docs/tree/main)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * EntityAuthorizationGrant Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class EntityAuthorizationGrant implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EntityAuthorizationGrant';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'author_identifier' => 'string',
        'author_identifier_type' => '\OpenAPI\Client\Model\EntityAuthorizationsAuthorIdentifierType',
        'authorized_entity_identifier' => 'string',
        'authorized_entity_identifier_type' => '\OpenAPI\Client\Model\EntityAuthorizationsAuthorizedEntityIdentifierType',
        'authorizing_entity_identifier' => 'string',
        'authorizing_entity_identifier_type' => '\OpenAPI\Client\Model\EntityAuthorizationsAuthorizingEntityIdentifierType',
        'authorization_scope' => '\OpenAPI\Client\Model\InvoicePermissionType',
        'description' => 'string',
        'start_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'author_identifier' => null,
        'author_identifier_type' => null,
        'authorized_entity_identifier' => null,
        'authorized_entity_identifier_type' => null,
        'authorizing_entity_identifier' => null,
        'authorizing_entity_identifier_type' => null,
        'authorization_scope' => null,
        'description' => null,
        'start_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => true,
        'author_identifier' => true,
        'author_identifier_type' => true,
        'authorized_entity_identifier' => true,
        'authorized_entity_identifier_type' => false,
        'authorizing_entity_identifier' => true,
        'authorizing_entity_identifier_type' => false,
        'authorization_scope' => false,
        'description' => true,
        'start_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'author_identifier' => 'authorIdentifier',
        'author_identifier_type' => 'authorIdentifierType',
        'authorized_entity_identifier' => 'authorizedEntityIdentifier',
        'authorized_entity_identifier_type' => 'authorizedEntityIdentifierType',
        'authorizing_entity_identifier' => 'authorizingEntityIdentifier',
        'authorizing_entity_identifier_type' => 'authorizingEntityIdentifierType',
        'authorization_scope' => 'authorizationScope',
        'description' => 'description',
        'start_date' => 'startDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'author_identifier' => 'setAuthorIdentifier',
        'author_identifier_type' => 'setAuthorIdentifierType',
        'authorized_entity_identifier' => 'setAuthorizedEntityIdentifier',
        'authorized_entity_identifier_type' => 'setAuthorizedEntityIdentifierType',
        'authorizing_entity_identifier' => 'setAuthorizingEntityIdentifier',
        'authorizing_entity_identifier_type' => 'setAuthorizingEntityIdentifierType',
        'authorization_scope' => 'setAuthorizationScope',
        'description' => 'setDescription',
        'start_date' => 'setStartDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'author_identifier' => 'getAuthorIdentifier',
        'author_identifier_type' => 'getAuthorIdentifierType',
        'authorized_entity_identifier' => 'getAuthorizedEntityIdentifier',
        'authorized_entity_identifier_type' => 'getAuthorizedEntityIdentifierType',
        'authorizing_entity_identifier' => 'getAuthorizingEntityIdentifier',
        'authorizing_entity_identifier_type' => 'getAuthorizingEntityIdentifierType',
        'authorization_scope' => 'getAuthorizationScope',
        'description' => 'getDescription',
        'start_date' => 'getStartDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('author_identifier', $data ?? [], null);
        $this->setIfExists('author_identifier_type', $data ?? [], null);
        $this->setIfExists('authorized_entity_identifier', $data ?? [], null);
        $this->setIfExists('authorized_entity_identifier_type', $data ?? [], null);
        $this->setIfExists('authorizing_entity_identifier', $data ?? [], null);
        $this->setIfExists('authorizing_entity_identifier_type', $data ?? [], null);
        $this->setIfExists('authorization_scope', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('start_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Identyfikator uprawnienia.
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets author_identifier
     *
     * @return string|null
     */
    public function getAuthorIdentifier()
    {
        return $this->container['author_identifier'];
    }

    /**
     * Sets author_identifier
     *
     * @param string|null $author_identifier Identyfikator osoby nadającej uprawnienie.
     *
     * @return self
     */
    public function setAuthorIdentifier($author_identifier)
    {
        if (is_null($author_identifier)) {
            array_push($this->openAPINullablesSetToNull, 'author_identifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('author_identifier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['author_identifier'] = $author_identifier;

        return $this;
    }

    /**
     * Gets author_identifier_type
     *
     * @return \OpenAPI\Client\Model\EntityAuthorizationsAuthorIdentifierType|null
     */
    public function getAuthorIdentifierType()
    {
        return $this->container['author_identifier_type'];
    }

    /**
     * Sets author_identifier_type
     *
     * @param \OpenAPI\Client\Model\EntityAuthorizationsAuthorIdentifierType|null $author_identifier_type Typ identyfikatora osoby nadającej uprawnienie.
     *
     * @return self
     */
    public function setAuthorIdentifierType($author_identifier_type)
    {
        if (is_null($author_identifier_type)) {
            array_push($this->openAPINullablesSetToNull, 'author_identifier_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('author_identifier_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['author_identifier_type'] = $author_identifier_type;

        return $this;
    }

    /**
     * Gets authorized_entity_identifier
     *
     * @return string|null
     */
    public function getAuthorizedEntityIdentifier()
    {
        return $this->container['authorized_entity_identifier'];
    }

    /**
     * Sets authorized_entity_identifier
     *
     * @param string|null $authorized_entity_identifier Identyfikator podmiotu uprawnionego.
     *
     * @return self
     */
    public function setAuthorizedEntityIdentifier($authorized_entity_identifier)
    {
        if (is_null($authorized_entity_identifier)) {
            array_push($this->openAPINullablesSetToNull, 'authorized_entity_identifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authorized_entity_identifier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['authorized_entity_identifier'] = $authorized_entity_identifier;

        return $this;
    }

    /**
     * Gets authorized_entity_identifier_type
     *
     * @return \OpenAPI\Client\Model\EntityAuthorizationsAuthorizedEntityIdentifierType|null
     */
    public function getAuthorizedEntityIdentifierType()
    {
        return $this->container['authorized_entity_identifier_type'];
    }

    /**
     * Sets authorized_entity_identifier_type
     *
     * @param \OpenAPI\Client\Model\EntityAuthorizationsAuthorizedEntityIdentifierType|null $authorized_entity_identifier_type Typ identyfikatora podmiotu uprawnionego.
     *
     * @return self
     */
    public function setAuthorizedEntityIdentifierType($authorized_entity_identifier_type)
    {
        if (is_null($authorized_entity_identifier_type)) {
            throw new \InvalidArgumentException('non-nullable authorized_entity_identifier_type cannot be null');
        }
        $this->container['authorized_entity_identifier_type'] = $authorized_entity_identifier_type;

        return $this;
    }

    /**
     * Gets authorizing_entity_identifier
     *
     * @return string|null
     */
    public function getAuthorizingEntityIdentifier()
    {
        return $this->container['authorizing_entity_identifier'];
    }

    /**
     * Sets authorizing_entity_identifier
     *
     * @param string|null $authorizing_entity_identifier Identyfikator podmiotu uprawniającego.
     *
     * @return self
     */
    public function setAuthorizingEntityIdentifier($authorizing_entity_identifier)
    {
        if (is_null($authorizing_entity_identifier)) {
            array_push($this->openAPINullablesSetToNull, 'authorizing_entity_identifier');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('authorizing_entity_identifier', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['authorizing_entity_identifier'] = $authorizing_entity_identifier;

        return $this;
    }

    /**
     * Gets authorizing_entity_identifier_type
     *
     * @return \OpenAPI\Client\Model\EntityAuthorizationsAuthorizingEntityIdentifierType|null
     */
    public function getAuthorizingEntityIdentifierType()
    {
        return $this->container['authorizing_entity_identifier_type'];
    }

    /**
     * Sets authorizing_entity_identifier_type
     *
     * @param \OpenAPI\Client\Model\EntityAuthorizationsAuthorizingEntityIdentifierType|null $authorizing_entity_identifier_type Typ identyfikatora podmiotu uprawniającego.
     *
     * @return self
     */
    public function setAuthorizingEntityIdentifierType($authorizing_entity_identifier_type)
    {
        if (is_null($authorizing_entity_identifier_type)) {
            throw new \InvalidArgumentException('non-nullable authorizing_entity_identifier_type cannot be null');
        }
        $this->container['authorizing_entity_identifier_type'] = $authorizing_entity_identifier_type;

        return $this;
    }

    /**
     * Gets authorization_scope
     *
     * @return \OpenAPI\Client\Model\InvoicePermissionType|null
     */
    public function getAuthorizationScope()
    {
        return $this->container['authorization_scope'];
    }

    /**
     * Sets authorization_scope
     *
     * @param \OpenAPI\Client\Model\InvoicePermissionType|null $authorization_scope Uprawnienie.
     *
     * @return self
     */
    public function setAuthorizationScope($authorization_scope)
    {
        if (is_null($authorization_scope)) {
            throw new \InvalidArgumentException('non-nullable authorization_scope cannot be null');
        }
        $this->container['authorization_scope'] = $authorization_scope;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Opis uprawnienia.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime|null $start_date Data rozpoczęcia obowiązywania uprawnienia.
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        if (is_null($start_date)) {
            throw new \InvalidArgumentException('non-nullable start_date cannot be null');
        }
        $this->container['start_date'] = $start_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


