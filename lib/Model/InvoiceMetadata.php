<?php
/**
 * InvoiceMetadata
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * KSeF API TE
 *
 * **Wersja API:** 2.0.0 (build 2.0.0-rc2-te-20250725.2+5adfde843e2c34f7d63e9a50dccbb9dab79bc320)<br>  **Klucze publiczne** Ministerstwa Finansów (dla danego środowiska): [Pobierz klucze](#tag/Certyfikaty-klucza-publicznego)<br>  **Historia zmian:** [Changelog](#)<br>  **Rozszerzona dokumentacja API:** [ksef-docs](https://github.com/CIRFMF/ksef-docs/tree/main)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InvoiceMetadata Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class InvoiceMetadata implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InvoiceMetadata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'ksef_number' => 'string',
        'invoice_number' => 'string',
        'invoice_date' => '\DateTime',
        'acquisition_date' => '\DateTime',
        'seller' => '\OpenAPI\Client\Model\InvoiceMetadataSeller',
        'buyer' => '\OpenAPI\Client\Model\InvoiceMetadataBuyer',
        'net_amount' => 'float',
        'gross_amount' => 'float',
        'vat_amount' => 'float',
        'currency' => '\OpenAPI\Client\Model\CurrencyCode',
        'invoicing_mode' => '\OpenAPI\Client\Model\InvoicingMode',
        'invoice_type' => '\OpenAPI\Client\Model\InvoiceMetadataInvoiceType',
        'form_code' => '\OpenAPI\Client\Model\FormCode',
        'is_hidden' => 'bool',
        'is_self_invoicing' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'ksef_number' => null,
        'invoice_number' => null,
        'invoice_date' => 'date-time',
        'acquisition_date' => 'date-time',
        'seller' => null,
        'buyer' => null,
        'net_amount' => 'double',
        'gross_amount' => 'double',
        'vat_amount' => 'double',
        'currency' => null,
        'invoicing_mode' => null,
        'invoice_type' => null,
        'form_code' => null,
        'is_hidden' => null,
        'is_self_invoicing' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'ksef_number' => false,
        'invoice_number' => false,
        'invoice_date' => false,
        'acquisition_date' => false,
        'seller' => false,
        'buyer' => false,
        'net_amount' => false,
        'gross_amount' => false,
        'vat_amount' => false,
        'currency' => false,
        'invoicing_mode' => false,
        'invoice_type' => false,
        'form_code' => false,
        'is_hidden' => false,
        'is_self_invoicing' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ksef_number' => 'ksefNumber',
        'invoice_number' => 'invoiceNumber',
        'invoice_date' => 'invoiceDate',
        'acquisition_date' => 'acquisitionDate',
        'seller' => 'seller',
        'buyer' => 'buyer',
        'net_amount' => 'netAmount',
        'gross_amount' => 'grossAmount',
        'vat_amount' => 'vatAmount',
        'currency' => 'currency',
        'invoicing_mode' => 'invoicingMode',
        'invoice_type' => 'invoiceType',
        'form_code' => 'formCode',
        'is_hidden' => 'isHidden',
        'is_self_invoicing' => 'isSelfInvoicing'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ksef_number' => 'setKsefNumber',
        'invoice_number' => 'setInvoiceNumber',
        'invoice_date' => 'setInvoiceDate',
        'acquisition_date' => 'setAcquisitionDate',
        'seller' => 'setSeller',
        'buyer' => 'setBuyer',
        'net_amount' => 'setNetAmount',
        'gross_amount' => 'setGrossAmount',
        'vat_amount' => 'setVatAmount',
        'currency' => 'setCurrency',
        'invoicing_mode' => 'setInvoicingMode',
        'invoice_type' => 'setInvoiceType',
        'form_code' => 'setFormCode',
        'is_hidden' => 'setIsHidden',
        'is_self_invoicing' => 'setIsSelfInvoicing'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ksef_number' => 'getKsefNumber',
        'invoice_number' => 'getInvoiceNumber',
        'invoice_date' => 'getInvoiceDate',
        'acquisition_date' => 'getAcquisitionDate',
        'seller' => 'getSeller',
        'buyer' => 'getBuyer',
        'net_amount' => 'getNetAmount',
        'gross_amount' => 'getGrossAmount',
        'vat_amount' => 'getVatAmount',
        'currency' => 'getCurrency',
        'invoicing_mode' => 'getInvoicingMode',
        'invoice_type' => 'getInvoiceType',
        'form_code' => 'getFormCode',
        'is_hidden' => 'getIsHidden',
        'is_self_invoicing' => 'getIsSelfInvoicing'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('ksef_number', $data ?? [], null);
        $this->setIfExists('invoice_number', $data ?? [], null);
        $this->setIfExists('invoice_date', $data ?? [], null);
        $this->setIfExists('acquisition_date', $data ?? [], null);
        $this->setIfExists('seller', $data ?? [], null);
        $this->setIfExists('buyer', $data ?? [], null);
        $this->setIfExists('net_amount', $data ?? [], null);
        $this->setIfExists('gross_amount', $data ?? [], null);
        $this->setIfExists('vat_amount', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('invoicing_mode', $data ?? [], null);
        $this->setIfExists('invoice_type', $data ?? [], null);
        $this->setIfExists('form_code', $data ?? [], null);
        $this->setIfExists('is_hidden', $data ?? [], null);
        $this->setIfExists('is_self_invoicing', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['ksef_number'] === null) {
            $invalidProperties[] = "'ksef_number' can't be null";
        }
        if ($this->container['invoice_number'] === null) {
            $invalidProperties[] = "'invoice_number' can't be null";
        }
        if ($this->container['invoice_date'] === null) {
            $invalidProperties[] = "'invoice_date' can't be null";
        }
        if ($this->container['acquisition_date'] === null) {
            $invalidProperties[] = "'acquisition_date' can't be null";
        }
        if ($this->container['seller'] === null) {
            $invalidProperties[] = "'seller' can't be null";
        }
        if ($this->container['buyer'] === null) {
            $invalidProperties[] = "'buyer' can't be null";
        }
        if ($this->container['net_amount'] === null) {
            $invalidProperties[] = "'net_amount' can't be null";
        }
        if ($this->container['gross_amount'] === null) {
            $invalidProperties[] = "'gross_amount' can't be null";
        }
        if ($this->container['vat_amount'] === null) {
            $invalidProperties[] = "'vat_amount' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['invoicing_mode'] === null) {
            $invalidProperties[] = "'invoicing_mode' can't be null";
        }
        if ($this->container['invoice_type'] === null) {
            $invalidProperties[] = "'invoice_type' can't be null";
        }
        if ($this->container['form_code'] === null) {
            $invalidProperties[] = "'form_code' can't be null";
        }
        if ($this->container['is_hidden'] === null) {
            $invalidProperties[] = "'is_hidden' can't be null";
        }
        if ($this->container['is_self_invoicing'] === null) {
            $invalidProperties[] = "'is_self_invoicing' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ksef_number
     *
     * @return string
     */
    public function getKsefNumber()
    {
        return $this->container['ksef_number'];
    }

    /**
     * Sets ksef_number
     *
     * @param string $ksef_number Numer KSeF faktury.
     *
     * @return self
     */
    public function setKsefNumber($ksef_number)
    {
        if (is_null($ksef_number)) {
            throw new \InvalidArgumentException('non-nullable ksef_number cannot be null');
        }
        $this->container['ksef_number'] = $ksef_number;

        return $this;
    }

    /**
     * Gets invoice_number
     *
     * @return string
     */
    public function getInvoiceNumber()
    {
        return $this->container['invoice_number'];
    }

    /**
     * Sets invoice_number
     *
     * @param string $invoice_number Numer faktury nadany przez wystawcę.
     *
     * @return self
     */
    public function setInvoiceNumber($invoice_number)
    {
        if (is_null($invoice_number)) {
            throw new \InvalidArgumentException('non-nullable invoice_number cannot be null');
        }
        $this->container['invoice_number'] = $invoice_number;

        return $this;
    }

    /**
     * Gets invoice_date
     *
     * @return \DateTime
     */
    public function getInvoiceDate()
    {
        return $this->container['invoice_date'];
    }

    /**
     * Sets invoice_date
     *
     * @param \DateTime $invoice_date Data wystawienia faktury.
     *
     * @return self
     */
    public function setInvoiceDate($invoice_date)
    {
        if (is_null($invoice_date)) {
            throw new \InvalidArgumentException('non-nullable invoice_date cannot be null');
        }
        $this->container['invoice_date'] = $invoice_date;

        return $this;
    }

    /**
     * Gets acquisition_date
     *
     * @return \DateTime
     */
    public function getAcquisitionDate()
    {
        return $this->container['acquisition_date'];
    }

    /**
     * Sets acquisition_date
     *
     * @param \DateTime $acquisition_date Data przyjęcia faktury do systemu KSeF.
     *
     * @return self
     */
    public function setAcquisitionDate($acquisition_date)
    {
        if (is_null($acquisition_date)) {
            throw new \InvalidArgumentException('non-nullable acquisition_date cannot be null');
        }
        $this->container['acquisition_date'] = $acquisition_date;

        return $this;
    }

    /**
     * Gets seller
     *
     * @return \OpenAPI\Client\Model\InvoiceMetadataSeller
     */
    public function getSeller()
    {
        return $this->container['seller'];
    }

    /**
     * Sets seller
     *
     * @param \OpenAPI\Client\Model\InvoiceMetadataSeller $seller Dane identyfikujące sprzedawcę.
     *
     * @return self
     */
    public function setSeller($seller)
    {
        if (is_null($seller)) {
            throw new \InvalidArgumentException('non-nullable seller cannot be null');
        }
        $this->container['seller'] = $seller;

        return $this;
    }

    /**
     * Gets buyer
     *
     * @return \OpenAPI\Client\Model\InvoiceMetadataBuyer
     */
    public function getBuyer()
    {
        return $this->container['buyer'];
    }

    /**
     * Sets buyer
     *
     * @param \OpenAPI\Client\Model\InvoiceMetadataBuyer $buyer Dane identyfikujące nabywcę.
     *
     * @return self
     */
    public function setBuyer($buyer)
    {
        if (is_null($buyer)) {
            throw new \InvalidArgumentException('non-nullable buyer cannot be null');
        }
        $this->container['buyer'] = $buyer;

        return $this;
    }

    /**
     * Gets net_amount
     *
     * @return float
     */
    public function getNetAmount()
    {
        return $this->container['net_amount'];
    }

    /**
     * Sets net_amount
     *
     * @param float $net_amount Łączna kwota netto.
     *
     * @return self
     */
    public function setNetAmount($net_amount)
    {
        if (is_null($net_amount)) {
            throw new \InvalidArgumentException('non-nullable net_amount cannot be null');
        }
        $this->container['net_amount'] = $net_amount;

        return $this;
    }

    /**
     * Gets gross_amount
     *
     * @return float
     */
    public function getGrossAmount()
    {
        return $this->container['gross_amount'];
    }

    /**
     * Sets gross_amount
     *
     * @param float $gross_amount Łączna kwota brutto.
     *
     * @return self
     */
    public function setGrossAmount($gross_amount)
    {
        if (is_null($gross_amount)) {
            throw new \InvalidArgumentException('non-nullable gross_amount cannot be null');
        }
        $this->container['gross_amount'] = $gross_amount;

        return $this;
    }

    /**
     * Gets vat_amount
     *
     * @return float
     */
    public function getVatAmount()
    {
        return $this->container['vat_amount'];
    }

    /**
     * Sets vat_amount
     *
     * @param float $vat_amount Łączna kwota VAT.
     *
     * @return self
     */
    public function setVatAmount($vat_amount)
    {
        if (is_null($vat_amount)) {
            throw new \InvalidArgumentException('non-nullable vat_amount cannot be null');
        }
        $this->container['vat_amount'] = $vat_amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \OpenAPI\Client\Model\CurrencyCode
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \OpenAPI\Client\Model\CurrencyCode $currency Kod waluty.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets invoicing_mode
     *
     * @return \OpenAPI\Client\Model\InvoicingMode
     */
    public function getInvoicingMode()
    {
        return $this->container['invoicing_mode'];
    }

    /**
     * Sets invoicing_mode
     *
     * @param \OpenAPI\Client\Model\InvoicingMode $invoicing_mode Tryb fakturowania (online/offline).
     *
     * @return self
     */
    public function setInvoicingMode($invoicing_mode)
    {
        if (is_null($invoicing_mode)) {
            throw new \InvalidArgumentException('non-nullable invoicing_mode cannot be null');
        }
        $this->container['invoicing_mode'] = $invoicing_mode;

        return $this;
    }

    /**
     * Gets invoice_type
     *
     * @return \OpenAPI\Client\Model\InvoiceMetadataInvoiceType
     */
    public function getInvoiceType()
    {
        return $this->container['invoice_type'];
    }

    /**
     * Sets invoice_type
     *
     * @param \OpenAPI\Client\Model\InvoiceMetadataInvoiceType $invoice_type Rodzaj faktury.
     *
     * @return self
     */
    public function setInvoiceType($invoice_type)
    {
        if (is_null($invoice_type)) {
            throw new \InvalidArgumentException('non-nullable invoice_type cannot be null');
        }
        $this->container['invoice_type'] = $invoice_type;

        return $this;
    }

    /**
     * Gets form_code
     *
     * @return \OpenAPI\Client\Model\FormCode
     */
    public function getFormCode()
    {
        return $this->container['form_code'];
    }

    /**
     * Sets form_code
     *
     * @param \OpenAPI\Client\Model\FormCode $form_code Struktura dokumentu faktury.    Obsługiwane schematy:  | SystemCode | SchemaVersion | Value |  | --- | --- | --- |  | FA (2) | 1-0E | FA |  | FA (3) | 1-0E | FA |
     *
     * @return self
     */
    public function setFormCode($form_code)
    {
        if (is_null($form_code)) {
            throw new \InvalidArgumentException('non-nullable form_code cannot be null');
        }
        $this->container['form_code'] = $form_code;

        return $this;
    }

    /**
     * Gets is_hidden
     *
     * @return bool
     */
    public function getIsHidden()
    {
        return $this->container['is_hidden'];
    }

    /**
     * Sets is_hidden
     *
     * @param bool $is_hidden Czy faktura została oznaczona jako ukryta.
     *
     * @return self
     */
    public function setIsHidden($is_hidden)
    {
        if (is_null($is_hidden)) {
            throw new \InvalidArgumentException('non-nullable is_hidden cannot be null');
        }
        $this->container['is_hidden'] = $is_hidden;

        return $this;
    }

    /**
     * Gets is_self_invoicing
     *
     * @return bool
     */
    public function getIsSelfInvoicing()
    {
        return $this->container['is_self_invoicing'];
    }

    /**
     * Sets is_self_invoicing
     *
     * @param bool $is_self_invoicing Czy faktura została wystawiona w trybie samofakturowania.
     *
     * @return self
     */
    public function setIsSelfInvoicing($is_self_invoicing)
    {
        if (is_null($is_self_invoicing)) {
            throw new \InvalidArgumentException('non-nullable is_self_invoicing cannot be null');
        }
        $this->container['is_self_invoicing'] = $is_self_invoicing;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


