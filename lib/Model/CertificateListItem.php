<?php
/**
 * CertificateListItem
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * KSeF API TE
 *
 * **Wersja API:** 2.0.0 (build 2.0.0-rc2-te-20250725.2+5adfde843e2c34f7d63e9a50dccbb9dab79bc320)<br>  **Klucze publiczne** Ministerstwa Finansów (dla danego środowiska): [Pobierz klucze](#tag/Certyfikaty-klucza-publicznego)<br>  **Historia zmian:** [Changelog](#)<br>  **Rozszerzona dokumentacja API:** [ksef-docs](https://github.com/CIRFMF/ksef-docs/tree/main)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CertificateListItem Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CertificateListItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CertificateListItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'certificate_serial_number' => 'string',
        'name' => 'string',
        'common_name' => 'string',
        'status' => '\OpenAPI\Client\Model\CertificateListItemStatus',
        'subject_identifier' => 'string',
        'subject_identifier_type' => 'string',
        'valid_from' => '\DateTime',
        'valid_to' => '\DateTime',
        'last_use_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'certificate_serial_number' => null,
        'name' => null,
        'common_name' => null,
        'status' => null,
        'subject_identifier' => null,
        'subject_identifier_type' => null,
        'valid_from' => 'date-time',
        'valid_to' => 'date-time',
        'last_use_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'certificate_serial_number' => false,
        'name' => false,
        'common_name' => false,
        'status' => false,
        'subject_identifier' => false,
        'subject_identifier_type' => false,
        'valid_from' => false,
        'valid_to' => false,
        'last_use_date' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'certificate_serial_number' => 'certificateSerialNumber',
        'name' => 'name',
        'common_name' => 'commonName',
        'status' => 'status',
        'subject_identifier' => 'subjectIdentifier',
        'subject_identifier_type' => 'subjectIdentifierType',
        'valid_from' => 'validFrom',
        'valid_to' => 'validTo',
        'last_use_date' => 'lastUseDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'certificate_serial_number' => 'setCertificateSerialNumber',
        'name' => 'setName',
        'common_name' => 'setCommonName',
        'status' => 'setStatus',
        'subject_identifier' => 'setSubjectIdentifier',
        'subject_identifier_type' => 'setSubjectIdentifierType',
        'valid_from' => 'setValidFrom',
        'valid_to' => 'setValidTo',
        'last_use_date' => 'setLastUseDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'certificate_serial_number' => 'getCertificateSerialNumber',
        'name' => 'getName',
        'common_name' => 'getCommonName',
        'status' => 'getStatus',
        'subject_identifier' => 'getSubjectIdentifier',
        'subject_identifier_type' => 'getSubjectIdentifierType',
        'valid_from' => 'getValidFrom',
        'valid_to' => 'getValidTo',
        'last_use_date' => 'getLastUseDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('certificate_serial_number', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('common_name', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('subject_identifier', $data ?? [], null);
        $this->setIfExists('subject_identifier_type', $data ?? [], null);
        $this->setIfExists('valid_from', $data ?? [], null);
        $this->setIfExists('valid_to', $data ?? [], null);
        $this->setIfExists('last_use_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['certificate_serial_number'] === null) {
            $invalidProperties[] = "'certificate_serial_number' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['common_name'] === null) {
            $invalidProperties[] = "'common_name' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['subject_identifier'] === null) {
            $invalidProperties[] = "'subject_identifier' can't be null";
        }
        if ($this->container['subject_identifier_type'] === null) {
            $invalidProperties[] = "'subject_identifier_type' can't be null";
        }
        if ($this->container['valid_from'] === null) {
            $invalidProperties[] = "'valid_from' can't be null";
        }
        if ($this->container['valid_to'] === null) {
            $invalidProperties[] = "'valid_to' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets certificate_serial_number
     *
     * @return string
     */
    public function getCertificateSerialNumber()
    {
        return $this->container['certificate_serial_number'];
    }

    /**
     * Sets certificate_serial_number
     *
     * @param string $certificate_serial_number Numer seryjny certyfikatu (w formacie szesnastkowym).
     *
     * @return self
     */
    public function setCertificateSerialNumber($certificate_serial_number)
    {
        if (is_null($certificate_serial_number)) {
            throw new \InvalidArgumentException('non-nullable certificate_serial_number cannot be null');
        }
        $this->container['certificate_serial_number'] = $certificate_serial_number;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Nazwa własna certyfikatu.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets common_name
     *
     * @return string
     */
    public function getCommonName()
    {
        return $this->container['common_name'];
    }

    /**
     * Sets common_name
     *
     * @param string $common_name Nazwa powszechna (CN) podmiotu, dla którego wystawiono certyfikat.
     *
     * @return self
     */
    public function setCommonName($common_name)
    {
        if (is_null($common_name)) {
            throw new \InvalidArgumentException('non-nullable common_name cannot be null');
        }
        $this->container['common_name'] = $common_name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\CertificateListItemStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\CertificateListItemStatus $status Status certyfikatu.  | Wartość | Opis |  | --- | --- |  | Active | Certyfikat jest aktywny i może zostać użyty do uwierzytelnienia. |  | Blocked | Certyfikat został zablokowany i nie może zostać użyty do uwierzytelnienia.            Status przejściowy do czasu zakończenia procesu unieważniania. |  | Revoked | Certyfikat został unieważniony i nie może zostać użyty do uwierzytelnienia. |  | Expired | Certyfikat wygasł i nie może zostać użyty do uwierzytelnienia. |
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets subject_identifier
     *
     * @return string
     */
    public function getSubjectIdentifier()
    {
        return $this->container['subject_identifier'];
    }

    /**
     * Sets subject_identifier
     *
     * @param string $subject_identifier Identyfikator podmiotu, dla którego wystawiono certyfikat.
     *
     * @return self
     */
    public function setSubjectIdentifier($subject_identifier)
    {
        if (is_null($subject_identifier)) {
            throw new \InvalidArgumentException('non-nullable subject_identifier cannot be null');
        }
        $this->container['subject_identifier'] = $subject_identifier;

        return $this;
    }

    /**
     * Gets subject_identifier_type
     *
     * @return string
     */
    public function getSubjectIdentifierType()
    {
        return $this->container['subject_identifier_type'];
    }

    /**
     * Sets subject_identifier_type
     *
     * @param string $subject_identifier_type Typ identyfikatora podmiotu, dla którego wystawiono certyfikat.
     *
     * @return self
     */
    public function setSubjectIdentifierType($subject_identifier_type)
    {
        if (is_null($subject_identifier_type)) {
            throw new \InvalidArgumentException('non-nullable subject_identifier_type cannot be null');
        }
        $this->container['subject_identifier_type'] = $subject_identifier_type;

        return $this;
    }

    /**
     * Gets valid_from
     *
     * @return \DateTime
     */
    public function getValidFrom()
    {
        return $this->container['valid_from'];
    }

    /**
     * Sets valid_from
     *
     * @param \DateTime $valid_from Data rozpoczęcia ważności certyfikatu.
     *
     * @return self
     */
    public function setValidFrom($valid_from)
    {
        if (is_null($valid_from)) {
            throw new \InvalidArgumentException('non-nullable valid_from cannot be null');
        }
        $this->container['valid_from'] = $valid_from;

        return $this;
    }

    /**
     * Gets valid_to
     *
     * @return \DateTime
     */
    public function getValidTo()
    {
        return $this->container['valid_to'];
    }

    /**
     * Sets valid_to
     *
     * @param \DateTime $valid_to Data wygaśnięcia certyfikatu.
     *
     * @return self
     */
    public function setValidTo($valid_to)
    {
        if (is_null($valid_to)) {
            throw new \InvalidArgumentException('non-nullable valid_to cannot be null');
        }
        $this->container['valid_to'] = $valid_to;

        return $this;
    }

    /**
     * Gets last_use_date
     *
     * @return \DateTime|null
     */
    public function getLastUseDate()
    {
        return $this->container['last_use_date'];
    }

    /**
     * Sets last_use_date
     *
     * @param \DateTime|null $last_use_date Data ostatniego użycia certyfikatu.
     *
     * @return self
     */
    public function setLastUseDate($last_use_date)
    {
        if (is_null($last_use_date)) {
            array_push($this->openAPINullablesSetToNull, 'last_use_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('last_use_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['last_use_date'] = $last_use_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


