<?php
/**
 * SendInvoiceRequest
 *
 * PHP version 8.1
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * KSeF API TE
 *
 * **Wersja API:** 2.0.0 (build 2.0.0-rc2-te-20250725.2+5adfde843e2c34f7d63e9a50dccbb9dab79bc320)<br>  **Klucze publiczne** Ministerstwa Finansów (dla danego środowiska): [Pobierz klucze](#tag/Certyfikaty-klucza-publicznego)<br>  **Historia zmian:** [Changelog](#)<br>  **Rozszerzona dokumentacja API:** [ksef-docs](https://github.com/CIRFMF/ksef-docs/tree/main)
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SendInvoiceRequest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SendInvoiceRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SendInvoiceRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'invoice_hash' => 'string',
        'invoice_size' => 'int',
        'encrypted_invoice_hash' => 'string',
        'encrypted_invoice_size' => 'int',
        'encrypted_invoice_content' => 'string',
        'offline_mode' => 'bool',
        'hash_of_corrected_invoice' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'invoice_hash' => null,
        'invoice_size' => 'int64',
        'encrypted_invoice_hash' => null,
        'encrypted_invoice_size' => 'int64',
        'encrypted_invoice_content' => null,
        'offline_mode' => null,
        'hash_of_corrected_invoice' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'invoice_hash' => false,
        'invoice_size' => false,
        'encrypted_invoice_hash' => false,
        'encrypted_invoice_size' => false,
        'encrypted_invoice_content' => false,
        'offline_mode' => false,
        'hash_of_corrected_invoice' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'invoice_hash' => 'invoiceHash',
        'invoice_size' => 'invoiceSize',
        'encrypted_invoice_hash' => 'encryptedInvoiceHash',
        'encrypted_invoice_size' => 'encryptedInvoiceSize',
        'encrypted_invoice_content' => 'encryptedInvoiceContent',
        'offline_mode' => 'offlineMode',
        'hash_of_corrected_invoice' => 'hashOfCorrectedInvoice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'invoice_hash' => 'setInvoiceHash',
        'invoice_size' => 'setInvoiceSize',
        'encrypted_invoice_hash' => 'setEncryptedInvoiceHash',
        'encrypted_invoice_size' => 'setEncryptedInvoiceSize',
        'encrypted_invoice_content' => 'setEncryptedInvoiceContent',
        'offline_mode' => 'setOfflineMode',
        'hash_of_corrected_invoice' => 'setHashOfCorrectedInvoice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'invoice_hash' => 'getInvoiceHash',
        'invoice_size' => 'getInvoiceSize',
        'encrypted_invoice_hash' => 'getEncryptedInvoiceHash',
        'encrypted_invoice_size' => 'getEncryptedInvoiceSize',
        'encrypted_invoice_content' => 'getEncryptedInvoiceContent',
        'offline_mode' => 'getOfflineMode',
        'hash_of_corrected_invoice' => 'getHashOfCorrectedInvoice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('invoice_hash', $data ?? [], null);
        $this->setIfExists('invoice_size', $data ?? [], null);
        $this->setIfExists('encrypted_invoice_hash', $data ?? [], null);
        $this->setIfExists('encrypted_invoice_size', $data ?? [], null);
        $this->setIfExists('encrypted_invoice_content', $data ?? [], null);
        $this->setIfExists('offline_mode', $data ?? [], false);
        $this->setIfExists('hash_of_corrected_invoice', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['invoice_hash'] === null) {
            $invalidProperties[] = "'invoice_hash' can't be null";
        }
        if ($this->container['invoice_size'] === null) {
            $invalidProperties[] = "'invoice_size' can't be null";
        }
        if ($this->container['encrypted_invoice_hash'] === null) {
            $invalidProperties[] = "'encrypted_invoice_hash' can't be null";
        }
        if ($this->container['encrypted_invoice_size'] === null) {
            $invalidProperties[] = "'encrypted_invoice_size' can't be null";
        }
        if ($this->container['encrypted_invoice_content'] === null) {
            $invalidProperties[] = "'encrypted_invoice_content' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets invoice_hash
     *
     * @return string
     */
    public function getInvoiceHash()
    {
        return $this->container['invoice_hash'];
    }

    /**
     * Sets invoice_hash
     *
     * @param string $invoice_hash Skrót SHA256 oryginalnej faktury, zakodowany w formacie Base64.
     *
     * @return self
     */
    public function setInvoiceHash($invoice_hash)
    {
        if (is_null($invoice_hash)) {
            throw new \InvalidArgumentException('non-nullable invoice_hash cannot be null');
        }
        $this->container['invoice_hash'] = $invoice_hash;

        return $this;
    }

    /**
     * Gets invoice_size
     *
     * @return int
     */
    public function getInvoiceSize()
    {
        return $this->container['invoice_size'];
    }

    /**
     * Sets invoice_size
     *
     * @param int $invoice_size Rozmiar oryginalnej faktury w bajtach.
     *
     * @return self
     */
    public function setInvoiceSize($invoice_size)
    {
        if (is_null($invoice_size)) {
            throw new \InvalidArgumentException('non-nullable invoice_size cannot be null');
        }
        $this->container['invoice_size'] = $invoice_size;

        return $this;
    }

    /**
     * Gets encrypted_invoice_hash
     *
     * @return string
     */
    public function getEncryptedInvoiceHash()
    {
        return $this->container['encrypted_invoice_hash'];
    }

    /**
     * Sets encrypted_invoice_hash
     *
     * @param string $encrypted_invoice_hash Skrót SHA256 zaszyfrowanej faktury, zakodowany w formacie Base64.
     *
     * @return self
     */
    public function setEncryptedInvoiceHash($encrypted_invoice_hash)
    {
        if (is_null($encrypted_invoice_hash)) {
            throw new \InvalidArgumentException('non-nullable encrypted_invoice_hash cannot be null');
        }
        $this->container['encrypted_invoice_hash'] = $encrypted_invoice_hash;

        return $this;
    }

    /**
     * Gets encrypted_invoice_size
     *
     * @return int
     */
    public function getEncryptedInvoiceSize()
    {
        return $this->container['encrypted_invoice_size'];
    }

    /**
     * Sets encrypted_invoice_size
     *
     * @param int $encrypted_invoice_size Rozmiar zaszyfrowanej faktury w bajtach.
     *
     * @return self
     */
    public function setEncryptedInvoiceSize($encrypted_invoice_size)
    {
        if (is_null($encrypted_invoice_size)) {
            throw new \InvalidArgumentException('non-nullable encrypted_invoice_size cannot be null');
        }
        $this->container['encrypted_invoice_size'] = $encrypted_invoice_size;

        return $this;
    }

    /**
     * Gets encrypted_invoice_content
     *
     * @return string
     */
    public function getEncryptedInvoiceContent()
    {
        return $this->container['encrypted_invoice_content'];
    }

    /**
     * Sets encrypted_invoice_content
     *
     * @param string $encrypted_invoice_content Faktura zaszyfrowana algorytmem AES-256-CBC z dopełnianiem PKCS#7 (kluczem przekazanym przy otwarciu sesji), zakodowana w formacie Base64.
     *
     * @return self
     */
    public function setEncryptedInvoiceContent($encrypted_invoice_content)
    {
        if (is_null($encrypted_invoice_content)) {
            throw new \InvalidArgumentException('non-nullable encrypted_invoice_content cannot be null');
        }
        $this->container['encrypted_invoice_content'] = $encrypted_invoice_content;

        return $this;
    }

    /**
     * Gets offline_mode
     *
     * @return bool|null
     */
    public function getOfflineMode()
    {
        return $this->container['offline_mode'];
    }

    /**
     * Sets offline_mode
     *
     * @param bool|null $offline_mode Określa, czy podatnik deklaruje tryb fakturowania \"offline\" dla przesyłanego dokumentu.
     *
     * @return self
     */
    public function setOfflineMode($offline_mode)
    {
        if (is_null($offline_mode)) {
            throw new \InvalidArgumentException('non-nullable offline_mode cannot be null');
        }
        $this->container['offline_mode'] = $offline_mode;

        return $this;
    }

    /**
     * Gets hash_of_corrected_invoice
     *
     * @return string|null
     */
    public function getHashOfCorrectedInvoice()
    {
        return $this->container['hash_of_corrected_invoice'];
    }

    /**
     * Sets hash_of_corrected_invoice
     *
     * @param string|null $hash_of_corrected_invoice Skrót SHA256 korygowanej faktury, zakodowany w formacie Base64. Wymagany przy wysyłaniu korekty technicznej faktury.
     *
     * @return self
     */
    public function setHashOfCorrectedInvoice($hash_of_corrected_invoice)
    {
        if (is_null($hash_of_corrected_invoice)) {
            array_push($this->openAPINullablesSetToNull, 'hash_of_corrected_invoice');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hash_of_corrected_invoice', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hash_of_corrected_invoice'] = $hash_of_corrected_invoice;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


